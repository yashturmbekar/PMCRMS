using Microsoft.EntityFrameworkCore;
using PMCRMS.API.Data;
using PMCRMS.API.Models;
using PMCRMS.API.Common;
using QuestPDF.Fluent;
using QuestPDF.Helpers;
using QuestPDF.Infrastructure;

namespace PMCRMS.API.Services
{
    /// <summary>
    /// Service for generating and managing Structural Engineer / Position Licence Certificates
    /// Certificates are generated after payment completion and stored in database only (SEDocuments table)
    /// </summary>
    public class SECertificateGenerationService : ISECertificateGenerationService
    {
        private readonly PMCRMSDbContext _context;
        private readonly ILogger<SECertificateGenerationService> _logger;
        private readonly IChallanService _challanService;
        private readonly IWebHostEnvironment _environment;

        public SECertificateGenerationService(
            PMCRMSDbContext context,
            ILogger<SECertificateGenerationService> logger,
            IChallanService challanService,
            IWebHostEnvironment environment)
        {
            _context = context;
            _logger = logger;
            _challanService = challanService;
            _environment = environment;
        }

        /// <summary>
        /// Generate and save licence certificate with retry logic
        /// Certificate is stored in SEDocuments table ONLY (no physical file storage)
        /// </summary>
        public async Task<bool> GenerateAndSaveLicenceCertificateAsync(int applicationId)
        {
            const int MAX_RETRY_ATTEMPTS = 3;
            const int RETRY_DELAY_MS = 2000; // 2 seconds between retries

            var application = await _context.PositionApplications
                .Include(a => a.Addresses)
                .FirstOrDefaultAsync(a => a.Id == applicationId);

            if (application == null)
            {
                _logger.LogError("‚ùå Application {ApplicationId} not found for certificate generation", applicationId);
                return false;
            }

            // Check if certificate already exists
            var existingCertificate = await _context.SEDocuments
                .FirstOrDefaultAsync(d => d.ApplicationId == applicationId && d.DocumentType == SEDocumentType.LicenceCertificate);

            if (existingCertificate != null)
            {
                _logger.LogInformation("‚úÖ Licence certificate already exists for application {ApplicationId}", applicationId);
                return true;
            }

            Exception? lastException = null;
            bool success = false;

            for (int attempt = 1; attempt <= MAX_RETRY_ATTEMPTS; attempt++)
            {
                try
                {
                    _logger.LogInformation("üîÑ Attempting to generate licence certificate for application {ApplicationId} (Attempt {Attempt}/{MaxAttempts})",
                        applicationId, attempt, MAX_RETRY_ATTEMPTS);

                    // Generate certificate PDF inline (simplified version)
                    var pdfBytes = await GenerateCertificatePdfInlineAsync(applicationId);

                    if (pdfBytes == null || pdfBytes.Length == 0)
                    {
                        throw new Exception("Failed to generate certificate PDF - result is empty");
                    }

                    // Create document record - Store PDF content in database ONLY (no physical file storage)
                    var certificate = new SEDocument
                    {
                        ApplicationId = applicationId,
                        DocumentType = SEDocumentType.LicenceCertificate,
                        FileName = $"LicenceCertificate_{application.ApplicationNumber ?? applicationId.ToString()}.pdf",
                        FilePath = string.Empty, // No physical file - database storage only
                        FileId = Guid.NewGuid().ToString(),
                        FileSize = (decimal)(pdfBytes.Length / 1024.0), // Size in KB
                        ContentType = "application/pdf",
                        FileContent = pdfBytes, // Store PDF binary data in database
                        IsVerified = false,
                        CreatedDate = DateTime.UtcNow
                    };

                    _context.SEDocuments.Add(certificate);
                    await _context.SaveChangesAsync();

                    _logger.LogInformation("‚úÖ Licence certificate generated and saved to database for application {ApplicationId} on attempt {Attempt}",
                        applicationId, attempt);

                    success = true;
                    break; // Success - exit retry loop
                }
                catch (Exception ex)
                {
                    lastException = ex;
                    _logger.LogError(ex, "‚ùå Failed to generate licence certificate for application {ApplicationId} on attempt {Attempt}/{MaxAttempts}",
                        applicationId, attempt, MAX_RETRY_ATTEMPTS);

                    if (attempt < MAX_RETRY_ATTEMPTS)
                    {
                        _logger.LogWarning("‚è≥ Retrying certificate generation after {Delay}ms delay...", RETRY_DELAY_MS);
                        await Task.Delay(RETRY_DELAY_MS);
                    }
                }
            }

            if (!success && lastException != null)
            {
                _logger.LogError("‚ùå Failed to generate licence certificate for application {ApplicationId} after {MaxAttempts} attempts. Last error: {Error}",
                    applicationId, MAX_RETRY_ATTEMPTS, lastException.Message);
            }

            return success;
        }

        /// <summary>
        /// Retrieve generated certificate PDF from database
        /// </summary>
        public async Task<byte[]?> GetCertificatePdfAsync(int applicationId)
        {
            try
            {
                var certificate = await _context.SEDocuments
                    .Where(d => d.ApplicationId == applicationId && d.DocumentType == SEDocumentType.LicenceCertificate)
                    .OrderByDescending(d => d.CreatedDate)
                    .FirstOrDefaultAsync();

                if (certificate?.FileContent != null)
                {
                    _logger.LogInformation("‚úÖ Retrieved licence certificate from database for application {ApplicationId}", applicationId);
                    return certificate.FileContent;
                }

                _logger.LogWarning("‚ö†Ô∏è Licence certificate not found for application {ApplicationId}", applicationId);
                return null;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "‚ùå Error retrieving certificate for application {ApplicationId}", applicationId);
                return null;
            }
        }

        /// <summary>
        /// Generate certificate PDF inline using QuestPDF (simplified version without complex templates)
        /// </summary>
        private async Task<byte[]> GenerateCertificatePdfInlineAsync(int applicationId)
        {
            var application = await _context.PositionApplications
                .Include(a => a.Addresses)
                .FirstOrDefaultAsync(a => a.Id == applicationId);

            if (application == null)
            {
                throw new Exception($"Application {applicationId} not found");
            }

            var challan = await _context.Challans
                .Where(c => c.ApplicationId == applicationId)
                .OrderByDescending(c => c.CreatedAt)
                .FirstOrDefaultAsync();

            if (challan == null)
            {
                throw new Exception($"Challan not found for application {applicationId}");
            }

            // Generate certificate number
            string certificatePrefix = GetCertificatePrefix(application.PositionType);
            int count = await _context.PositionApplications
                .CountAsync(a => a.ApplicationNumber != null &&
                            a.CreatedDate.Year == DateTime.Now.Year) + 1;

            string certificateNumber = $"PMC/{certificatePrefix}/{count}/{DateTime.Now.Year}-{DateTime.Now.Year + 3}";
            string marathiPosition = GetMarathiPosition(application.PositionType);
            string englishPosition = GetEnglishPosition(application.PositionType);
            string applicantName = $"{application.FirstName} {(string.IsNullOrEmpty(application.MiddleName) ? "" : application.MiddleName + " ")}{application.LastName}".Trim();
            
            var currentAddress = application.Addresses.FirstOrDefault(a => a.AddressType == "Current");
            string fullAddress = currentAddress != null
                ? $"{currentAddress.AddressLine1}, {currentAddress.City} {currentAddress.State} {currentAddress.PinCode}"
                : "";

            DateTime fromDate = DateTime.Now;
            int toYear = DateTime.Now.Year + 3;

            // Load PMC logo - First try from database, then fallback to file system
            byte[]? logoBytes = null;
            
            // Try to fetch logo from SystemSettings table
            var logoSetting = await _context.SystemSettings
                .FirstOrDefaultAsync(s => s.SettingKey == "PMC_LOGO" && s.IsActive);
            
            if (logoSetting?.BinaryData != null && logoSetting.BinaryData.Length > 0)
            {
                logoBytes = logoSetting.BinaryData;
                _logger.LogInformation("‚úÖ PMC Logo loaded from database (Size: {Size} bytes)", logoBytes.Length);
            }
            else
            {
                // Fallback to file system
                var logoPath = Path.Combine(_environment.WebRootPath, "Images", "Certificate", "logo.png");
                _logger.LogWarning("‚ö†Ô∏è PMC Logo not found in database. Trying file system at: {LogoPath}", logoPath);
                
                if (File.Exists(logoPath))
                {
                    logoBytes = await File.ReadAllBytesAsync(logoPath);
                    _logger.LogInformation("‚úÖ PMC Logo loaded from file system (Size: {Size} bytes)", logoBytes.Length);
                }
                else
                {
                    _logger.LogError("‚ùå PMC Logo not found! Checked database (SettingKey: PMC_LOGO) and file system ({LogoPath})", logoPath);
                    _logger.LogError("‚ùå Please upload logo to database using SystemSettings API or place logo.png file at: {LogoPath}", logoPath);
                }
            }

            // Get profile photo from SEDocument table
            var profilePhotoDocument = await _context.SEDocuments
                .FirstOrDefaultAsync(d => d.ApplicationId == applicationId && 
                                        d.DocumentType == SEDocumentType.ProfilePicture);

            byte[]? profilePhotoBytes = null;
            if (profilePhotoDocument != null)
            {
                // If FileContent exists, use it; otherwise read from FilePath
                if (profilePhotoDocument.FileContent != null && profilePhotoDocument.FileContent.Length > 0)
                {
                    profilePhotoBytes = profilePhotoDocument.FileContent;
                    _logger.LogInformation("Using profile photo from database FileContent for application {ApplicationId}", applicationId);
                }
                else if (!string.IsNullOrEmpty(profilePhotoDocument.FilePath))
                {
                    var photoPath = Path.Combine(_environment.WebRootPath, profilePhotoDocument.FilePath.TrimStart('/'));
                    if (File.Exists(photoPath))
                    {
                        profilePhotoBytes = File.ReadAllBytes(photoPath);
                        _logger.LogInformation("Using profile photo from file path {PhotoPath} for application {ApplicationId}", photoPath, applicationId);
                    }
                }
            }

            // Use a placeholder if no profile photo found (1x1 white pixel PNG)
            if (profilePhotoBytes == null)
            {
                _logger.LogWarning("Profile photo not found for application {ApplicationId}, using placeholder", applicationId);
                profilePhotoBytes = Convert.FromBase64String("iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAADUlEQVR42mP8/5+hHgAHggJ/PchI7wAAAABJRU5ErkJggg==");
            }

            // Generate QR Code
            string qrData = $"{certificateNumber}|{applicantName}|{fromDate:dd/MM/yyyy}";
            byte[] qrCodeBytes = QrCodeGenerator.GenerateQrCode(qrData, 10);

            // Generate simple certificate PDF
            var document = Document.Create(container =>
            {
                container.Page(page =>
                {
                    page.Size(PageSizes.A4);
                    page.Margin(20);
                    page.PageColor(Colors.White);

                    page.Content().Column(column =>
                    {
                        // Top right corner - Department info
                        column.Item().Row(row =>
                        {
                            row.RelativeItem(); // Empty left space
                            row.ConstantItem(150).AlignRight().Column(col =>
                            {
                                col.Item().Text("‡§¨‡§æ‡§Ç‡§ß‡§ï‡§æ‡§Æ ‡§µ‡§ø‡§ï‡§æ‡§∏ ‡§µ‡§ø‡§≠‡§æ‡§ó")
                                    .FontFamily(FontService.MarathiFontFamily)
                                    .FontSize(7)
                                    .Bold();

                                col.Item().Text("‡§™‡•Å‡§£‡•á ‡§Æ‡§π‡§æ‡§®‡§ó‡§∞‡§™‡§æ‡§≤‡§ø‡§ï‡§æ")
                                    .FontFamily(FontService.MarathiFontFamily)
                                    .FontSize(7)
                                    .Bold();
                            });
                        });

                        column.Item().Height(5);

                        // Header section: QR Code (Left) | PMC Logo (Center) | Profile Photo (Right)
                        column.Item().Row(row =>
                        {
                            // QR Code (Left) - 90x90
                            row.RelativeItem(1).AlignLeft().Column(qrCol =>
                            {
                                if (qrCodeBytes != null && qrCodeBytes.Length > 0)
                                {
                                    qrCol.Item().Height(90).Width(90).Image(qrCodeBytes);
                                }
                            });

                            // PMC Logo (Center) - 80x80
                            row.RelativeItem(1).AlignCenter().Column(logoCol =>
                            {
                                if (logoBytes != null)
                                {
                                    logoCol.Item().Height(80).Width(80).AlignCenter().Image(logoBytes);
                                }
                            });

                            // Profile Photo (Right) - 75x95 with border
                            row.RelativeItem(1).AlignRight().Column(photoCol =>
                            {
                                if (profilePhotoBytes != null)
                                {
                                    photoCol.Item()
                                        .Height(95)
                                        .Width(75)
                                        .Border(2)
                                        .BorderColor(Colors.Black)
                                        .Image(profilePhotoBytes);
                                }
                            });
                        });

                        column.Item().Height(8);

                        // Main title - ‡§™‡•Å‡§£‡•á ‡§Æ‡§π‡§æ‡§®‡§ó‡§∞‡§™‡§æ‡§≤‡§ø‡§ï‡§æ (Centered, large and bold)
                        column.Item().AlignCenter().Text("‡§™‡•Å‡§£‡•á ‡§Æ‡§π‡§æ‡§®‡§ó‡§∞‡§™‡§æ‡§≤‡§ø‡§ï‡§æ")
                            .FontFamily(FontService.MarathiFontFamily)
                            .FontSize(16)
                            .Bold();

                        column.Item().Height(3);

                        // Subtitle - ‡§∏‡•ç‡§ü‡•ç‡§∞‡§ï‡•ç‡§ö‡§∞‡§≤ ‡§á‡§Ç‡§ú‡§ø‡§®‡§ø‡§Ö‡§∞ ‡§ö‡•ç‡§Ø‡§æ ‡§ï‡§æ‡§Æ‡§æ‡§∏‡§æ‡§†‡•Ä ‡§™‡§∞‡§µ‡§æ‡§®‡§æ (Centered with underline)
                        column.Item().AlignCenter().Text($"{marathiPosition} ‡§ö‡•ç‡§Ø‡§æ ‡§ï‡§æ‡§Æ‡§æ‡§∏‡§æ‡§†‡•Ä ‡§™‡§∞‡§µ‡§æ‡§®‡§æ")
                            .FontFamily(FontService.MarathiFontFamily)
                            .FontSize(10)
                            .Underline();

                        column.Item().Height(8);

                        // Legal reference paragraph
                        column.Item().Text($"‡§Æ‡§π‡§æ‡§∞‡§æ‡§∑‡•ç‡§ü‡•ç‡§∞ ‡§™‡•ç‡§∞‡§æ‡§¶‡•á‡§∂‡§ø‡§ï ‡§Ö‡§ß‡§ø‡§®‡§ø‡§Ø‡§Æ ‡•ß‡•Ø‡•¨‡•¨ ‡§ö‡•á ‡§ï‡§≤‡§Æ ‡•©‡•≠ (‡•ß ‡§ï‡§ï )(‡§ó) ‡§ï‡§≤‡§Æ ‡•®‡•¶ (‡•™)/ ‡§®‡§µ‡§ø-‡•ß‡•© ‡§¶‡§ø.‡•®/‡•ß‡•®/‡•®‡•¶‡•®‡•¶ ‡§Ö‡§®‡•ç‡§µ‡§Ø‡•á ‡§™‡•Å‡§£‡•á ‡§∂‡§π‡§∞‡§æ‡§∏‡§æ‡§†‡•Ä ‡§Æ‡§æ‡§®‡•ç‡§Ø ‡§ù‡§æ‡§≤‡•á‡§≤‡•ç‡§Ø‡§æ ‡§è‡§ï‡§§‡•ç‡§∞‡§ø‡§ï‡•É‡§§ ‡§µ‡§ø‡§ï‡§æ‡§∏ ‡§®‡§ø‡§Ø‡§Ç‡§§‡•ç‡§∞‡§£ ‡§µ ‡§™‡•ç‡§∞‡•ã‡§§‡•ç‡§∏‡§æ‡§π‡§® ‡§®‡§ø‡§Ø‡§Æ‡§æ‡§µ‡§≤‡•Ä (‡§Ø‡•Ç‡§°‡•Ä‡§∏‡•Ä‡§™‡•Ä‡§Ü‡§∞ -‡•®‡•¶‡•®‡•¶) ‡§®‡§ø‡§Ø‡§Æ ‡§ï‡•ç‡§∞.‡§Ö‡§™‡•á‡§Ç‡§°‡§ø‡§ï‡•ç‡§∏ '‡§∏‡•Ä' ‡§Ö‡§®‡•ç‡§µ‡§Ø‡•á ‡§Ü‡§£‡§ø ‡§Æ‡§π‡§æ‡§∞‡§æ‡§∑‡•ç‡§ü‡•ç‡§∞ ‡§Æ‡§π‡§æ‡§®‡§ó‡§∞‡§™‡§æ‡§≤‡§ø‡§ï‡§æ ‡§Ö‡§ß‡§ø‡§®‡§ø‡§Ø‡§Æ ‡•ß‡•Ø‡•™‡•Ø ‡§ö‡•á ‡§ï‡§≤‡§Æ ‡•©‡•≠‡•® ‡§Ö‡§®‡•ç‡§µ‡§Ø‡•á {marathiPosition} ‡§ï‡§æ‡§Æ ‡§ï‡§∞‡§£‡•ç‡§Ø‡§æ‡§∏ ‡§™‡§∞‡§µ‡§æ‡§®‡§æ ‡§¶‡•á‡§£‡•ç‡§Ø‡§æ‡§§ ‡§Ø‡•á‡§§ ‡§Ü‡§π‡•á.")
                            .FontFamily(FontService.MarathiFontFamily)
                            .FontSize(9)
                            .LineHeight(1.2f);

                        column.Item().Height(5);

                        // Certificate number and validity
                        column.Item().Text(text =>
                        {
                            text.Span($"‡§™‡§∞‡§µ‡§æ‡§®‡§æ ‡§ï‡•ç‡§∞. :- ")
                                .FontFamily(FontService.MarathiFontFamily)
                                .FontSize(9);

                            text.Span($"{certificateNumber}                     From {fromDate:dd/MM/yyyy} to 31/12/{toYear}                 ({englishPosition})")
                                .FontFamily("Times New Roman")
                                .Bold()
                                .FontSize(9);
                        });

                        column.Item().Height(5);

                        // Applicant Name
                        column.Item().Text(text =>
                        {
                            text.Span($"‡§®‡§æ‡§µ :- ")
                                .FontFamily(FontService.MarathiFontFamily)
                                .FontSize(9);

                            text.Span(applicantName)
                                .FontFamily("Times New Roman")
                                .Bold()
                                .FontSize(9);
                        });

                        // Address
                        column.Item().Text(text =>
                        {
                            text.Span("‡§™‡§§‡•ç‡§§‡§æ :- ")
                                .FontFamily(FontService.MarathiFontFamily)
                                .FontSize(9);

                            text.Span(fullAddress)
                                .FontFamily("Times New Roman")
                                .Bold()
                                .FontSize(9);
                        });

                        // Date (Right aligned on separate row)
                        column.Item().AlignRight().Text(text =>
                        {
                            text.Span("‡§¶‡§ø‡§®‡§æ‡§Ç‡§ï :- ")
                                .FontFamily(FontService.MarathiFontFamily)
                                .FontSize(9);

                            text.Span($"{fromDate:dd/MM/yyyy}")
                                .FontFamily("Times New Roman")
                                .FontSize(9);
                        });

                        column.Item().Height(5);

                        // Terms and conditions - Paragraph 1
                        column.Item().Text($"‡§Æ‡§π‡§æ‡§∞‡§æ‡§∑‡•ç‡§ü‡•ç‡§∞ ‡§™‡•ç‡§∞‡§æ‡§¶‡•á‡§∂‡§ø‡§ï ‡§Ö‡§ß‡§ø‡§®‡§ø‡§Ø‡§Æ ‡•ß‡•Ø‡•¨‡•¨ ‡§ö‡•á ‡§ï‡§≤‡§Æ ‡•©‡•≠ (‡•ß ‡§ï‡§ï )(‡§ó) ‡§ï‡§≤‡§Æ ‡•®‡•¶ (‡•™)/ ‡§®‡§µ‡§ø-‡•ß‡•© ‡§¶‡§ø.‡•®/‡•ß‡•®/‡•®‡•¶‡•®‡•¶ ‡§Ö‡§®‡•ç‡§µ‡§Ø‡•á ‡§™‡•Å‡§£‡•á ‡§∂‡§π‡§∞‡§æ‡§∏‡§æ‡§†‡•Ä ‡§Æ‡§æ‡§®‡•ç‡§Ø ‡§ù‡§æ‡§≤‡•á‡§≤‡•ç‡§Ø‡§æ ‡§è‡§ï‡§§‡•ç‡§∞‡§ø‡§ï‡•É‡§§ ‡§µ‡§ø‡§ï‡§æ‡§∏ ‡§®‡§ø‡§Ø‡§Ç‡§§‡•ç‡§∞‡§£ ‡§µ ‡§™‡•ç‡§∞‡•ã‡§§‡•ç‡§∏‡§æ‡§π‡§® ‡§®‡§ø‡§Ø‡§Æ‡§æ‡§µ‡§≤‡•Ä (‡§Ø‡•Ç‡§°‡•Ä‡§∏‡•Ä‡§™‡•Ä‡§Ü‡§∞ -‡•®‡•¶‡•®‡•¶) ‡§®‡§ø‡§Ø‡§Æ ‡§ï‡•ç‡§∞.‡§Ö‡§™‡•á‡§Ç‡§°‡§ø‡§ï‡•ç‡§∏ '‡§∏‡•Ä' ‡§Ö‡§®‡•ç‡§µ‡§Ø‡•á ‡§Ü‡§£‡§ø ‡§Æ‡§π‡§æ‡§∞‡§æ‡§∑‡•ç‡§ü‡•ç‡§∞ ‡§Æ‡§π‡§æ‡§®‡§ó‡§∞‡§™‡§æ‡§≤‡§ø‡§ï‡§æ ‡§Ö‡§ß‡§ø‡§®‡§ø‡§Ø‡§Æ, ‡•ß‡•Ø‡•™‡•Ø ‡§ö‡•á ‡§ï‡§≤‡§Æ ‡•©‡•≠‡•® ‡§Ö‡§®‡•ç‡§µ‡§Ø‡•á ‡§Æ‡•Ä ‡§§‡•Å‡§Æ‡•ç‡§π‡§æ‡§Ç‡§∏ ‡§µ‡§∞ ‡§®‡§ø‡§∞‡•ç‡§¶‡•á‡§∂ ‡§ï‡•á‡§≤‡•á‡§≤‡•ç‡§Ø‡§æ ‡§ï‡§æ‡§Ø‡§¶‡§æ ‡§µ ‡§®‡§ø‡§Ø‡§Æ‡§æ‡§®‡•Å‡§∏‡§æ‡§∞ ‡•© ‡§µ‡§∞‡•ç‡§∑‡§æ‡§Ç‡§ï‡§∞‡•Ä‡§§‡§æ ‡§¶‡§ø. {fromDate:dd/MM/yyyy} ‡§§‡•á 31/12/{toYear} ‡§Ö‡§ñ‡•á‡§∞ {marathiPosition} ‡§Æ‡•ç‡§π‡§£‡•Ç‡§® '‡§ñ‡§æ‡§≤‡•Ä‡§≤ ‡§Æ‡§∞‡•ç‡§Ø‡§æ‡§¶‡§æ ‡§µ ‡§Ö‡§ü‡•Ä ‡§Ø‡§æ‡§Ç‡§ö‡•á ‡§™‡§æ‡§≤‡§® ‡§ï‡§∞‡§£‡§æ‡§∞' ‡§Ø‡§æ ‡§Ö‡§ü‡•Ä‡§µ‡§∞ ‡§™‡§∞‡§µ‡§æ‡§®‡§æ ‡§¶‡•á‡§§ ‡§Ü‡§π‡•á.")
                            .FontFamily(FontService.MarathiFontFamily)
                            .FontSize(9)
                            .LineHeight(1.2f);

                        column.Item().Height(3);

                        // Terms and conditions - Paragraph 2
                        column.Item().Text("'‡§Æ‡§æ. ‡§Æ‡§π‡§æ‡§™‡§æ‡§≤‡§ø‡§ï‡§æ ‡§Ü‡§Ø‡•Å‡§ï‡•ç‡§§, ‡§Ø‡§æ‡§Ç‡§®‡•Ä ‡§µ‡•á‡§≥‡•ã‡§µ‡•á‡§≥‡•Ä ‡§∏‡•ç‡§•‡§æ‡§Ø‡•Ä ‡§∏‡§Æ‡§ø‡§§‡•Ä‡§ö‡•ç‡§Ø‡§æ ‡§∏‡§Ç‡§Æ‡§§‡•Ä‡§®‡•á ‡§µ‡§∞‡•Ä‡§≤ ‡§ï‡§æ‡§Ø‡§¶‡•ç‡§Ø‡§æ‡§ö‡•á ‡§ï‡§≤‡§Æ ‡•©‡•≠‡•© ‡§™‡§∞‡§µ‡§æ‡§®‡§æ‡§ß‡§æ‡§∞‡§£ ‡§ï‡§∞‡§£‡§æ‡§∞ ‡§Ø‡§æ‡§Ç‡§ö‡•ç‡§Ø‡§æ ‡§Æ‡§æ‡§π‡§ø‡§§‡•Ä‡§∏‡§æ‡§†‡•Ä ‡§ï‡§æ‡§¢‡§£‡•ç‡§Ø‡§æ‡§§ ‡§Ü‡§≤‡•á‡§≤‡•ç‡§Ø‡§æ ‡§Ü‡§ú‡•ç‡§û‡•á‡§ö‡•á ‡§Ü‡§£‡§ø ‡§µ‡§ø‡§ï‡§æ‡§∏ (‡§¨‡§æ‡§Ç‡§ß‡§ï‡§æ‡§Æ) ‡§®‡§ø‡§Ø‡§Ç‡§§‡•ç‡§∞‡§£ ‡§µ ‡§™‡•ç‡§∞‡•ã‡§§‡•ç‡§∏‡§æ‡§π‡§® ‡§®‡§ø‡§Ø‡§Æ‡§æ‡§µ‡§≤‡•Ä‡§§‡•Ä‡§≤ ‡§Ö‡§™‡•á‡§Ç‡§°‡§ø‡§ï‡•ç‡§∏ '‡§∏‡•Ä' ‡§Æ‡§ß‡•Ä‡§≤ ‡§ï‡§∞‡•ç‡§§‡§µ‡•ç‡§Ø‡•á ‡§µ ‡§ú‡§¨‡§æ‡§¨‡§¶‡§æ‡§∞‡•Ä ‡§Ø‡§æ‡§Ç‡§ö‡•á ‡§™‡§æ‡§≤‡§® ‡§ï‡§∞‡§£‡§æ‡§∞' ‡§π‡•Ä ‡§™‡§∞‡§µ‡§æ‡§®‡§ó‡•Ä‡§ö‡•Ä ‡§Ö‡§ü ‡§∞‡§æ‡§π‡•Ä‡§≤ ‡§Ü‡§£‡§ø ‡§ß‡§Ç‡§¶‡•ç‡§Ø‡§æ‡§ö‡•ç‡§Ø‡§æ ‡§™‡•ç‡§∞‡§§‡•ç‡§Ø‡•á‡§ï ‡§¨‡§æ‡§¨‡§§‡•Ä‡§§ ‡§™‡§∞‡§µ‡§æ‡§®‡•ç‡§Ø‡§æ‡§ö‡•ç‡§Ø‡§æ ‡§Æ‡•Å‡§¶‡§§‡•Ä‡§§ ‡§ú‡•ç‡§Ø‡§æ‡§µ‡•á‡§≥‡•Ä ‡§§‡•Å‡§Æ‡§ö‡§æ ‡§∏‡§≤‡•ç‡§≤‡§æ ‡§ò‡•á‡§£‡•ç‡§Ø‡§æ‡§§ ‡§Ø‡•á‡§à‡§≤ ‡§§‡•ç‡§Ø‡§æ‡§µ‡•á‡§≥‡•Ä ‡§§‡•Å‡§Æ‡•ç‡§π‡•Ä ‡§Ü‡§§‡§æ‡§™‡§æ‡§µ‡•á‡§§‡•ã ‡§®‡§ø‡§ò‡§æ‡§≤‡•á‡§≤‡•ç‡§Ø‡§æ ‡§Ü‡§ú‡•ç‡§û‡§æ‡§Ç‡§ö‡•á ‡§™‡§æ‡§≤‡§® ‡§ï‡§∞‡•Ç‡§® ‡§§‡•ç‡§Ø‡§æ‡§™‡•ç‡§∞‡§Æ‡§æ‡§£‡•á ‡§ï‡§æ‡§Æ ‡§ï‡§∞‡§æ‡§µ‡§Ø‡§æ‡§ö‡•á ‡§Ü‡§π‡•á.")
                            .FontFamily(FontService.MarathiFontFamily)
                            .FontSize(9)
                            .LineHeight(1.2f);

                        column.Item().Height(3);

                        // Terms and conditions - Paragraph 3
                        column.Item().Text("‡§ú‡•Ä ‡§Ü‡§ú‡•ç‡§û‡§æ‡§™‡§§‡•ç‡§∞‡§ï ‡§µ‡•á‡§≥‡•ã‡§µ‡•á‡§≥‡•Ä ‡§ï‡§æ‡§¢‡§£‡•ç‡§Ø‡§æ‡§§ ‡§Ü‡§≤‡•á‡§≤‡•Ä ‡§Ü‡§π‡•á‡§§, ‡§§‡•Ä ‡§Æ‡•Å‡§ñ‡•ç‡§Ø ‡§ï‡§æ‡§∞‡•ç‡§Ø‡§æ‡§≤‡§Ø‡§æ‡§ï‡§°‡•á ‡§Æ‡§æ‡§π‡§ø‡§§‡•Ä‡§∏‡§æ‡§†‡•Ä ‡§†‡•á‡§µ‡§£‡•ç‡§Ø‡§æ‡§§ ‡§Ü‡§≤‡•á‡§≤‡•Ä ‡§Ö‡§∏‡•Ç‡§®, ‡§ú‡§∞‡•Ç‡§∞ ‡§§‡•ç‡§Ø‡§æ‡§µ‡•á‡§≥‡•Ä ‡§ï‡§æ‡§∞‡•ç‡§Ø‡§æ‡§≤‡§Ø‡§æ‡§ö‡•ç‡§Ø‡§æ ‡§µ‡•á‡§≥‡•á‡§Æ‡§ß‡•ç‡§Ø‡•á ‡§§‡•ç‡§Ø‡§æ‡§Ç‡§ö‡•Ä ‡§™‡§æ‡§π‡§£‡•Ä ‡§ï‡§∞‡§§‡§æ ‡§Ø‡•á‡§à‡§≤.")
                            .FontFamily(FontService.MarathiFontFamily)
                            .FontSize(9)
                            .LineHeight(1.2f);

                        column.Item().Height(3);

                        // Terms and conditions - Paragraph 4
                        column.Item().Text("‡§Æ‡§æ‡§§‡•ç‡§∞ ‡§π‡•á ‡§≤‡§ï‡•ç‡§∑‡§æ‡§§ ‡§ò‡•á‡§£‡•á ‡§ú‡§∞‡•Ç‡§∞ ‡§Ü‡§π‡•á ‡§ï‡•Ä, ‡§Æ‡§æ. ‡§Æ‡§π‡§æ‡§™‡§æ‡§≤‡§ø‡§ï‡§æ ‡§Ü‡§Ø‡•Å‡§ï‡•ç‡§§ ‡§∏‡§¶‡§∞‡§ö‡§æ ‡§™‡§∞‡§µ‡§æ‡§®‡§æ ‡§Æ‡§π‡§æ‡§∞‡§æ‡§∑‡•ç‡§ü‡•ç‡§∞ ‡§Æ‡§π‡§æ‡§®‡§ó‡§∞‡§™‡§æ‡§≤‡§ø‡§ï‡§æ ‡§Ö‡§ß‡§ø‡§®‡§ø‡§Ø‡§Æ, ‡§ï‡§≤‡§Æ ‡•©‡•Æ‡•¨ ‡§Ö‡§®‡•Å‡§∏‡§æ‡§∞ ‡§ú‡§∞‡•Ç‡§∞ ‡§§‡•á‡§µ‡•ç‡§π‡§æ ‡§§‡§æ‡§§‡•ç‡§™‡•Å‡§∞‡§§‡§æ ‡§¨‡§Ç‡§¶ ‡§Ö‡§ó‡§∞ ‡§∞‡§¶‡•ç‡§¶ ‡§ï‡§∞‡•Ç ‡§∂‡§ï‡§§‡§æ‡§§ ‡§ú‡§∞ ‡§µ‡§∞ ‡§®‡§ø‡§∞‡•ç‡§¶‡§ø‡§∑‡•ç‡§ü ‡§ï‡•á‡§≤‡•á‡§≤‡•Ä ‡§¨‡§Ç‡§ß‡§®‡•á ‡§Ö‡§ó‡§∞ ‡§∂‡§∞‡•ç‡§•‡•Ä ‡§Ø‡§æ‡§Ç‡§ö‡§æ ‡§≠‡§Ç‡§ó ‡§ù‡§æ‡§≤‡§æ ‡§Ö‡§ó‡§∞ ‡§ü‡§æ‡§≥‡§≤‡•ç‡§Ø‡§æ ‡§ó‡•á‡§≤‡•ç‡§Ø‡§æ ‡§Ö‡§•‡§µ‡§æ ‡§§‡•Å‡§Æ‡•ç‡§π‡•Ä ‡§∏‡§¶‡§∞ ‡§ï‡§æ‡§Ø‡§¶‡•ç‡§Ø‡§æ‡§ö‡•ç‡§Ø‡§æ ‡§®‡§ø‡§Ø‡§Æ‡§æ‡§Ç‡§ö‡•á ‡§Ö‡§ó‡§∞ ‡§µ‡•á‡§≥‡•ã‡§µ‡•á‡§≥‡•Ä ‡§ï‡§æ‡§¢‡§£‡•ç‡§Ø‡§æ‡§§ ‡§Ü‡§≤‡•á‡§≤‡•ç‡§Ø‡§æ ‡§Ü‡§ú‡•ç‡§û‡§æ‡§™‡§§‡•ç‡§∞‡§ï‡§æ‡§ö‡•á ‡§â‡§≤‡•ç‡§≤‡§Ç‡§ò‡§® ‡§ï‡•á‡§≤‡•ç‡§Ø‡§æ‡§ö‡•á ‡§¶‡•É‡§∑‡•ç‡§ü‡•ã‡§™‡§§‡•Ä‡§∏ ‡§Ü‡§≤‡•ç‡§Ø‡§æ‡§∏ ‡§Ü‡§£‡§ø ‡§ú‡§∞ ‡§∏‡§¶‡§∞‡§ö‡§æ ‡§™‡§∞‡§µ‡§æ‡§®‡§æ ‡§§‡§æ‡§§‡•ç‡§™‡•Å‡§∞‡§§‡§æ ‡§§‡§π‡§ï‡•Ç‡§¨ ‡§Ö‡§ó‡§∞ ‡§∞‡§¶‡•ç‡§¶ ‡§ù‡§æ‡§≤‡•ç‡§Ø‡§æ‡§∏ ‡§Ö‡§•‡§µ‡§æ ‡§∏‡§¶‡§∞‡§ö‡•ç‡§Ø‡§æ ‡§™‡§∞‡§µ‡§æ‡§®‡•ç‡§Ø‡§æ‡§ö‡•Ä ‡§Æ‡•Å‡§¶‡§§ ‡§∏‡§Ç‡§™‡§≤‡•ç‡§Ø‡§æ‡§µ‡§∞ ‡§§‡•Å‡§Æ‡•ç‡§π‡§æ‡§∏ ‡§™‡§∞‡§µ‡§æ‡§®‡§æ ‡§®‡§∏‡§≤‡•ç‡§Ø‡§æ‡§ö‡•á ‡§∏‡§Æ‡§ú‡§≤‡•á ‡§ú‡§æ‡§à‡§≤ ‡§Ü‡§£‡§ø ‡§Æ‡§π‡§æ‡§®‡§ó‡§∞‡§™‡§æ‡§≤‡§ø‡§ï‡§æ ‡§Ö‡§ß‡§ø‡§®‡§ø‡§Ø‡§Æ‡§æ‡§ö‡•á ‡§ï‡§≤‡§Æ ‡•¨‡•Ø ‡§Ö‡§®‡•ç‡§µ‡§Ø‡•á ‡§Æ‡§æ.‡§Æ‡§π‡§æ‡§™‡§æ‡§≤‡§ø‡§ï‡§æ ‡§Ü‡§Ø‡•Å‡§ï‡•ç‡§§, ‡§Ö‡§ó‡§∞ ‡§§‡•ç‡§Ø‡§æ‡§Ç‡§®‡•Ä ‡§Ö‡§ß‡§ø‡§ï‡§æ‡§∞ ‡§¶‡§ø‡§≤‡•á‡§≤‡•ç‡§Ø‡§æ ‡§Ö‡§ß‡§ø‡§ï‡§æ-‡§Ø‡§æ‡§Ç‡§®‡•Ä ‡§∏‡§¶‡§∞ ‡§™‡§∞‡§µ‡§æ‡§®‡•ç‡§Ø‡§æ‡§ö‡•Ä ‡§Æ‡§æ‡§ó‡§£‡•Ä ‡§ï‡•á‡§≤‡•ç‡§Ø‡§æ‡§∏ ‡§∏‡§¶‡§∞‡§ö‡§æ ‡§™‡§∞‡§µ‡§æ‡§®‡§æ ‡§§‡•Å‡§Æ‡•ç‡§π‡§æ‡§∏ ‡§§‡•ç‡§Ø‡§æ ‡§§‡•ç‡§Ø‡§æ ‡§µ‡•á‡§≥‡•Ä ‡§π‡§ú‡§∞ ‡§ï‡§∞‡§æ‡§µ‡§æ ‡§≤‡§æ‡§ó‡•á‡§≤.")
                            .FontFamily(FontService.MarathiFontFamily)
                            .FontSize(9)
                            .LineHeight(1.2f);

                        column.Item().Height(3);

                        // Payment information
                        column.Item().Text(text =>
                        {
                            text.Span("‡§Æ‡§π‡§æ‡§∞‡§æ‡§∑‡•ç‡§ü‡•ç‡§∞ ‡§∂‡§æ‡§∏‡§®‡§æ‡§®‡•á ‡§™‡•Å‡§£‡•á ‡§∂‡§π‡§∞‡§æ‡§∏‡§æ‡§†‡•Ä ‡§Æ‡§æ‡§®‡•ç‡§Ø ‡§ï‡•á‡§≤‡•á‡§≤‡•ç‡§Ø‡§æ ‡§µ‡§ø‡§ï‡§æ‡§∏ (‡§¨‡§æ‡§Ç‡§ß‡§ï‡§æ‡§Æ) ‡§®‡§ø‡§Ø‡§Ç‡§§‡•ç‡§∞‡§£ ‡§µ ‡§™‡•ç‡§∞‡•ã‡§§‡•ç‡§∏‡§æ‡§π‡§® ‡§®‡§ø‡§Ø‡§Æ‡§æ‡§µ‡§≤‡•Ä‡§®‡•Å‡§∏‡§æ‡§∞ ‡§™‡§∞‡§µ‡§æ‡§®‡§æ ‡§∂‡•Å‡§≤‡•ç‡§ï ‡§Æ‡•ç‡§π‡§£‡•Ç‡§® ‡§∞‡•Å. ")
                                .FontFamily(FontService.MarathiFontFamily)
                                .FontSize(9);

                            text.Span(challan.Amount.ToString())
                                .FontFamily("Times New Roman")
                                .Bold()
                                .FontSize(9);

                            text.Span(" ‡§ö‡§≤‡§® ‡§ï‡•ç‡§∞. ")
                                .FontFamily(FontService.MarathiFontFamily)
                                .FontSize(9);

                            text.Span(challan.ChallanNumber)
                                .FontFamily("Times New Roman")
                                .Bold()
                                .FontSize(9);

                            text.Span(" ‡§¶‡§ø. ")
                                .FontFamily(FontService.MarathiFontFamily)
                                .FontSize(9);

                            text.Span($"{challan.ChallanDate:dd/MM/yyyy}")
                                .FontFamily("Times New Roman")
                                .Bold()
                                .FontSize(9);

                            text.Span(" ‡§Ö‡§®‡•ç‡§µ‡§Ø‡•á ‡§≠‡§∞‡§≤‡•á ‡§Ü‡§π‡•á.")
                                .FontFamily(FontService.MarathiFontFamily)
                                .FontSize(9);
                        });

                        column.Item().Height(50);

                        // Signatures
                        var engg = marathiPosition == "‡§∏‡•ç‡§ü‡•ç‡§∞‡§ï‡•ç‡§ö‡§∞‡§≤ ‡§á‡§Ç‡§ú‡§ø‡§®‡§ø‡§Ö‡§∞" ? "‡§ï‡§æ‡§∞‡•ç‡§Ø‡§ï‡§æ‡§∞‡•Ä" : "‡§â‡§™";

                        column.Item().Row(sigRow =>
                        {
                            sigRow.RelativeItem(1).AlignCenter().Text($"{engg} ‡§Ö‡§≠‡§ø‡§Ø‡§Ç‡§§‡§æ\n(‡§¨‡§æ‡§Ç‡§ß‡§ï‡§æ‡§Æ ‡§µ‡§ø‡§ï‡§æ‡§∏ ‡§µ‡§ø‡§≠‡§æ‡§ó)\n‡§™‡•Å‡§£‡•á ‡§Æ‡§π‡§æ‡§®‡§ó‡§∞‡§™‡§æ‡§≤‡§ø‡§ï‡§æ")
                                .FontFamily(FontService.MarathiFontFamily)
                                .FontSize(9);

                            sigRow.RelativeItem(1).AlignCenter().Text("‡§∂‡§π‡§∞ ‡§Ö‡§≠‡§ø‡§Ø‡§Ç‡§§‡§æ\n‡§™‡•Å‡§£‡•á ‡§Æ‡§π‡§æ‡§®‡§ó‡§∞‡§™‡§æ‡§≤‡§ø‡§ï‡§æ")
                                .FontFamily(FontService.MarathiFontFamily)
                                .FontSize(9);
                        });

                        column.Item().Height(5);

                        // Note (‡§ü‡•Ä‡§™)
                        column.Item().Text($"‡§ü‡•Ä‡§™ ‚Äì ‡§™‡•ç‡§∞‡§∏‡•ç‡§§‡•Å‡§§ ‡§™‡§∞‡§µ‡§æ‡§®‡•ç‡§Ø‡§æ‡§ö‡•Ä ‡§Æ‡•Å‡§¶‡§§ ‡•©‡•ß ‡§°‡§ø‡§∏‡•á‡§Ç‡§¨‡§∞ ‡§∞‡•ã‡§ú‡•Ä ‡§∏‡§Ç‡§™‡§§‡•á ‡§ú‡§∞ ‡§™‡•Å‡§¢‡•Ä‡§≤ ‡§µ‡§∞‡•ç‡§∑‡§æ‡§∏‡§æ‡§†‡•Ä ‡§§‡•ç‡§Ø‡§æ‡§ö‡•á ‡§®‡•Ç‡§§‡§®‡•Ä‡§ï‡§∞‡§£ ‡§ï‡§∞‡§£‡•á ‡§Ö‡§∏‡•á‡§≤ ‡§§‡§∞ ‡§Ø‡§æ‡§∏‡§æ‡§†‡•Ä ‡§ï‡§Æ‡•Ä‡§§ ‡§ï‡§Æ‡•Ä ‡•ß‡•´ ‡§¶‡§ø‡§µ‡§∏ ‡§™‡§∞‡§µ‡§æ‡§®‡§æ ‡§Æ‡•Å‡§¶‡§§ ‡§∏‡§Ç‡§™‡§£‡•ç‡§Ø‡§æ ‡§Ö‡§ó‡•ã‡§¶‡§∞ ‡§™‡§∞‡§µ‡§æ‡§®‡§æ ‡§∂‡•Å‡§≤‡•ç‡§ï‡§æ‡§∏‡§π‡§ø‡§§ ‡§Ö‡§∞‡•ç‡§ú ‡§∏‡§æ‡§¶‡§∞ ‡§ï‡•á‡§≤‡§æ ‡§™‡§æ‡§π‡§ø‡§ú‡•á. ‡§™‡§∞‡§µ‡§æ‡§®‡•ç‡§Ø‡§æ‡§ö‡•á ‡§®‡•Ç‡§§‡§®‡•Ä‡§ï‡§∞‡§£ ‡§ï‡§∞‡•Ç‡§® ‡§ò‡•á‡§£‡•ç‡§Ø‡§æ‡§¨‡§¶‡•ç‡§¶‡§≤ ‡§§‡•Å‡§Æ‡•ç‡§π‡§æ‡§∏ ‡§µ‡•á‡§ó‡§≥‡•Ä ‡§∏‡§Æ‡§ú ‡§¶‡§≤‡•Ä ‡§ú‡§æ‡§£‡§æ‡§∞ ‡§®‡§æ‡§π‡•Ä ‡§ú‡•ã‡§™‡§∞‡•ç‡§Ø‡§Ç‡§§ ‡§™‡§∞‡§µ‡§æ‡§®‡•ç‡§Ø‡§æ‡§ö‡•ç‡§Ø‡§æ ‡§®‡•Ç‡§§‡§®‡•Ä‡§ï‡§∞‡§£‡§æ‡§∏‡§æ‡§†‡•Ä ‡§™‡§∞‡§µ‡§æ‡§®‡§æ ‡§∂‡•Å‡§≤‡•ç‡§ï‡§æ‡§∏‡§π‡§ø‡§§ ‡§Ö‡§∞‡•ç‡§ú ‡§¶‡§ø‡§≤‡•á‡§≤‡§æ ‡§®‡§æ‡§π‡•Ä ‡§§‡•ã‡§™‡§∞‡•ç‡§Ø‡§Ç‡§§ {marathiPosition} ‡§Æ‡•ç‡§π‡§£‡•Ç‡§® ‡§ï‡§æ‡§Æ ‡§ï‡§∞‡§§‡§æ ‡§Ø‡•á‡§£‡§æ‡§∞ ‡§®‡§æ‡§π‡•Ä. ‡§§‡§∏‡•á‡§ö ‡§™‡§∞‡§µ‡§æ‡§®‡§æ ‡§®‡§æ‡§ï‡§æ‡§∞‡§≤‡•ç‡§Ø‡§æ‡§∏‡§π‡•Ä ‡§§‡•Å‡§Æ‡•ç‡§π‡§æ‡§∏ {marathiPosition} ‡§Æ‡•ç‡§π‡§£‡•Ç‡§® ‡§ï‡§æ‡§Æ ‡§ï‡§∞‡§§‡§æ ‡§Ø‡•á‡§£‡§æ‡§∞ ‡§®‡§æ‡§π‡•Ä.")
                            .FontFamily(FontService.MarathiFontFamily)
                            .FontSize(9)
                            .LineHeight(1.2f);
                    });
                });
            });

            return document.GeneratePdf();
        }

        private string GetCertificatePrefix(PositionType positionType)
        {
            return positionType switch
            {
                PositionType.Architect => "ARCH",
                PositionType.StructuralEngineer => "STR.ENGG",
                PositionType.LicenceEngineer => "LIC.ENGG",
                PositionType.Supervisor1 => "SUPER1",
                PositionType.Supervisor2 => "SUPER2",
                _ => "ENGG"
            };
        }

        private string GetMarathiPosition(PositionType positionType)
        {
            return positionType switch
            {
                PositionType.Architect => "‡§Ü‡§∞‡•ç‡§ï‡§ø‡§ü‡•á‡§ï‡•ç‡§ü",
                PositionType.StructuralEngineer => "‡§∏‡•ç‡§ü‡•ç‡§∞‡§ï‡•ç‡§ö‡§∞‡§≤ ‡§á‡§Ç‡§ú‡§ø‡§®‡§ø‡§Ö‡§∞",
                PositionType.LicenceEngineer => "‡§≤‡§æ‡§Ø‡§∏‡§®‡•ç‡§∏ ‡§á‡§Ç‡§ú‡§ø‡§®‡§ø‡§Ö‡§∞",
                PositionType.Supervisor1 => "‡§∏‡•Å‡§™‡§∞‡§µ‡§æ‡§Ø‡§ù‡§∞‡•ß",
                PositionType.Supervisor2 => "‡§∏‡•Å‡§™‡§∞‡§µ‡§æ‡§Ø‡§ù‡§∞‡•®",
                _ => "‡§á‡§Ç‡§ú‡§ø‡§®‡§ø‡§Ö‡§∞"
            };
        }

        private string GetEnglishPosition(PositionType positionType)
        {
            return positionType switch
            {
                PositionType.Architect => "Architect",
                PositionType.StructuralEngineer => "Structural Engineer",
                PositionType.LicenceEngineer => "Licence Engineer",
                PositionType.Supervisor1 => "Supervisor1",
                PositionType.Supervisor2 => "Supervisor2",
                _ => "Engineer"
            };
        }
    }
}
