// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using PMCRMS.API.Data;

#nullable disable

namespace PMCRMS.API.Migrations
{
    [DbContext(typeof(PMCRMSDbContext))]
    [Migration("20251015111912_SeedPmcLogoData")]
    partial class SeedPmcLogoData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("PMCRMS.API.Models.Application", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ApplicantId")
                        .HasColumnType("integer");

                    b.Property<string>("ApplicationNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("AppointmentRemarks")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<DateTime?>("AssignedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("AssignedOfficerDesignation")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int?>("AssignedOfficerId")
                        .HasColumnType("integer");

                    b.Property<string>("AssignedOfficerName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<decimal>("BuiltUpArea")
                        .HasColumnType("decimal(10,2)");

                    b.Property<DateTime?>("CertificateIssuedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CertificateNumber")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("CurrentStatus")
                        .HasColumnType("integer");

                    b.Property<decimal?>("EstimatedCost")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal?>("FeeAmount")
                        .HasColumnType("decimal(8,2)");

                    b.Property<bool>("IsPaymentComplete")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("PaymentCompletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("PaymentDueDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("PlotArea")
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("ProjectDescription")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("ProjectTitle")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Remarks")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<DateTime?>("ScheduledAppointmentDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("SiteAddress")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ApplicantId");

                    b.HasIndex("ApplicationNumber")
                        .IsUnique();

                    b.ToTable("Applications");
                });

            modelBuilder.Entity("PMCRMS.API.Models.ApplicationComment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ApplicationId")
                        .HasColumnType("integer");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<string>("CommentType")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("CommentedBy")
                        .HasColumnType("integer");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsInternal")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVisible")
                        .HasColumnType("boolean");

                    b.Property<int?>("ParentCommentId")
                        .HasColumnType("integer");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("CommentedBy");

                    b.HasIndex("ParentCommentId");

                    b.ToTable("ApplicationComments");
                });

            modelBuilder.Entity("PMCRMS.API.Models.ApplicationDocument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ApplicationId")
                        .HasColumnType("integer");

                    b.Property<string>("ContentType")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<long>("FileSize")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("boolean");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("VerificationRemarks")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int?>("VerifiedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("VerifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("VerifiedBy");

                    b.ToTable("ApplicationDocuments");
                });

            modelBuilder.Entity("PMCRMS.API.Models.ApplicationStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ApplicationId")
                        .HasColumnType("integer");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("RejectionReason")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Remarks")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime>("StatusDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("UpdatedByOfficerId")
                        .HasColumnType("integer");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("UpdatedByOfficerId");

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("ApplicationStatuses");
                });

            modelBuilder.Entity("PMCRMS.API.Models.Appointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ApplicationId")
                        .HasColumnType("integer");

                    b.Property<string>("CancellationReason")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<DateTime?>("CancelledAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Comments")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ConfirmedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ContactPerson")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("EmailNotificationSent")
                        .HasColumnType("boolean");

                    b.Property<string>("Place")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<bool>("ReminderSent")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ReminderSentAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("RescheduledFromAppointmentId")
                        .HasColumnType("integer");

                    b.Property<int?>("RescheduledToAppointmentId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ReviewDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("RoomNumber")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int?>("ScheduledByOfficerId")
                        .HasColumnType("integer");

                    b.Property<bool>("SmsNotificationSent")
                        .HasColumnType("boolean");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("RescheduledToAppointmentId")
                        .IsUnique();

                    b.HasIndex("ScheduledByOfficerId");

                    b.HasIndex("Status", "ReviewDate");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("PMCRMS.API.Models.AssignmentHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("AcceptedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Action")
                        .HasColumnType("integer");

                    b.Property<string>("AdminComments")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<int>("ApplicationId")
                        .HasColumnType("integer");

                    b.Property<int?>("ApplicationStatusAtAssignment")
                        .HasColumnType("integer");

                    b.Property<string>("AssignedByAdminId")
                        .HasColumnType("text");

                    b.Property<DateTime>("AssignedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("AssignedToOfficerId")
                        .HasColumnType("integer");

                    b.Property<decimal?>("AssignmentDurationHours")
                        .HasColumnType("numeric");

                    b.Property<int?>("AutoAssignmentRuleId")
                        .HasColumnType("integer");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("InactivatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Metadata")
                        .HasColumnType("text");

                    b.Property<bool>("NotificationSent")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("NotificationSentAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool?>("OfficerAccepted")
                        .HasColumnType("boolean");

                    b.Property<int?>("OfficerWorkloadAtAssignment")
                        .HasColumnType("integer");

                    b.Property<int?>("PreviousOfficerId")
                        .HasColumnType("integer");

                    b.Property<decimal?>("PriorityScore")
                        .HasColumnType("numeric");

                    b.Property<string>("Reason")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<int?>("StrategyUsed")
                        .HasColumnType("integer");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserAgent")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("AssignedToOfficerId");

                    b.HasIndex("AutoAssignmentRuleId");

                    b.HasIndex("PreviousOfficerId");

                    b.HasIndex("IsActive", "AssignedDate");

                    b.ToTable("AssignmentHistories");
                });

            modelBuilder.Entity("PMCRMS.API.Models.AutoAssignmentRule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("AutoAssignOnSubmission")
                        .HasColumnType("boolean");

                    b.Property<string>("Conditions")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("CreatedByAdminId")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<DateTime?>("EffectiveFrom")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("EffectiveTo")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("EscalationRole")
                        .HasColumnType("integer");

                    b.Property<int?>("EscalationTimeHours")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastAppliedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("LastRoundRobinIndex")
                        .HasColumnType("integer");

                    b.Property<int>("MaxWorkloadPerOfficer")
                        .HasColumnType("integer");

                    b.Property<string>("Metadata")
                        .HasColumnType("text");

                    b.Property<int?>("MinimumExperienceMonths")
                        .HasColumnType("integer");

                    b.Property<string>("ModifiedByAdminId")
                        .HasColumnType("text");

                    b.Property<string>("NotificationTemplate")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("PositionType")
                        .HasColumnType("integer");

                    b.Property<int>("Priority")
                        .HasColumnType("integer");

                    b.Property<bool>("SendNotification")
                        .HasColumnType("boolean");

                    b.Property<int>("Strategy")
                        .HasColumnType("integer");

                    b.Property<int>("TargetOfficerRole")
                        .HasColumnType("integer");

                    b.Property<int>("TimesApplied")
                        .HasColumnType("integer");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Priority");

                    b.HasIndex("PositionType", "IsActive");

                    b.HasIndex("TargetOfficerRole", "IsActive");

                    b.ToTable("AutoAssignmentRules");
                });

            modelBuilder.Entity("PMCRMS.API.Models.Challan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<string>("AmountInWords")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ApplicationId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ChallanDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ChallanNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsGenerated")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<byte[]>("PdfContent")
                        .HasColumnType("bytea");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("ChallanNumber")
                        .IsUnique();

                    b.HasIndex("ApplicationId", "IsGenerated");

                    b.ToTable("Challans");
                });

            modelBuilder.Entity("PMCRMS.API.Models.DigitalSignature", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ApplicationId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CertificateExpiryDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CertificateIssuer")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("CertificateSubject")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("CertificateThumbprint")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ErrorMessage")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<string>("HsmProvider")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("HsmResponse")
                        .HasColumnType("text");

                    b.Property<string>("HsmTransactionId")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("boolean");

                    b.Property<string>("KeyLabel")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime?>("LastVerifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Metadata")
                        .HasColumnType("text");

                    b.Property<string>("OriginalDocumentPath")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("OtpUsed")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<int>("RetryCount")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("SignatureCompletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("SignatureCoordinates")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int?>("SignatureDurationSeconds")
                        .HasColumnType("integer");

                    b.Property<string>("SignatureHash")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<DateTime?>("SignatureStartedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("SignedByOfficerId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("SignedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("SignedDocumentPath")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserAgent")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("VerificationDetails")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("HsmTransactionId");

                    b.HasIndex("SignedByOfficerId");

                    b.HasIndex("Status", "SignedDate");

                    b.ToTable("DigitalSignatures");
                });

            modelBuilder.Entity("PMCRMS.API.Models.DocumentVerification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ApplicationId")
                        .HasColumnType("integer");

                    b.Property<string>("ChecklistItems")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DocumentHash")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("DocumentId")
                        .HasColumnType("integer");

                    b.Property<long?>("DocumentSizeBytes")
                        .HasColumnType("bigint");

                    b.Property<string>("DocumentType")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool?>("IsAuthentic")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsComplete")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsCompliant")
                        .HasColumnType("boolean");

                    b.Property<string>("Metadata")
                        .HasColumnType("text");

                    b.Property<int?>("PageCount")
                        .HasColumnType("integer");

                    b.Property<string>("RejectionReason")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("VerificationComments")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<int?>("VerificationDurationMinutes")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("VerificationStartedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("VerifiedByOfficerId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("VerifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("DocumentId");

                    b.HasIndex("VerifiedByOfficerId");

                    b.HasIndex("Status", "VerifiedDate");

                    b.ToTable("DocumentVerifications");
                });

            modelBuilder.Entity("PMCRMS.API.Models.DownloadAuditLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ApplicationId")
                        .HasColumnType("integer");

                    b.Property<string>("DocumentType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("DownloadedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ErrorMessage")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool>("Success")
                        .HasColumnType("boolean");

                    b.Property<string>("Token")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<string>("UserAgent")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.ToTable("DownloadAuditLogs");
                });

            modelBuilder.Entity("PMCRMS.API.Models.DownloadToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ApplicationId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("FailedAttempts")
                        .HasColumnType("integer");

                    b.Property<bool>("IsOtpVerified")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRevoked")
                        .HasColumnType("boolean");

                    b.Property<string>("Otp")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<DateTime>("OtpExpiresAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("RequestIpAddress")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.ToTable("DownloadTokens");
                });

            modelBuilder.Entity("PMCRMS.API.Models.FormConfiguration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("AllowOnlineSubmission")
                        .HasColumnType("boolean");

                    b.Property<decimal>("BaseFee")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CustomFields")
                        .HasColumnType("jsonb");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("FormName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("FormType")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<decimal>("LateFee")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("MaxFileSizeMB")
                        .HasColumnType("integer");

                    b.Property<int?>("MaxFilesAllowed")
                        .HasColumnType("integer");

                    b.Property<int>("ProcessingDays")
                        .HasColumnType("integer");

                    b.Property<decimal>("ProcessingFee")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("RequiredDocuments")
                        .HasColumnType("jsonb");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("FormType")
                        .IsUnique();

                    b.ToTable("FormConfigurations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AllowOnlineSubmission = true,
                            BaseFee = 5000m,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Application for new building construction or major renovation",
                            FormName = "Building Permit Application",
                            FormType = 1,
                            IsActive = true,
                            LateFee = 500m,
                            MaxFileSizeMB = 10,
                            MaxFilesAllowed = 15,
                            ProcessingDays = 30,
                            ProcessingFee = 1000m
                        },
                        new
                        {
                            Id = 2,
                            AllowOnlineSubmission = true,
                            BaseFee = 2500m,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Application for Structural Engineer registration",
                            FormName = "Structural Engineer License",
                            FormType = 2,
                            IsActive = true,
                            LateFee = 250m,
                            MaxFileSizeMB = 5,
                            MaxFilesAllowed = 10,
                            ProcessingDays = 15,
                            ProcessingFee = 500m
                        },
                        new
                        {
                            Id = 3,
                            AllowOnlineSubmission = true,
                            BaseFee = 2500m,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Application for Architect registration",
                            FormName = "Architect License",
                            FormType = 3,
                            IsActive = true,
                            LateFee = 250m,
                            MaxFileSizeMB = 5,
                            MaxFilesAllowed = 10,
                            ProcessingDays = 15,
                            ProcessingFee = 500m
                        },
                        new
                        {
                            Id = 4,
                            AllowOnlineSubmission = true,
                            BaseFee = 3000m,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Application for Occupancy Certificate",
                            FormName = "Occupancy Certificate",
                            FormType = 6,
                            IsActive = true,
                            LateFee = 300m,
                            MaxFileSizeMB = 10,
                            MaxFilesAllowed = 12,
                            ProcessingDays = 20,
                            ProcessingFee = 750m
                        });
                });

            modelBuilder.Entity("PMCRMS.API.Models.FormFeeHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ChangeReason")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int>("ChangedByAdminId")
                        .HasColumnType("integer");

                    b.Property<int?>("ChangedByUserId")
                        .HasColumnType("integer");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("EffectiveFrom")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("FormConfigurationId")
                        .HasColumnType("integer");

                    b.Property<decimal>("NewBaseFee")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("NewProcessingFee")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("OldBaseFee")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("OldProcessingFee")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ChangedByAdminId");

                    b.HasIndex("ChangedByUserId");

                    b.HasIndex("FormConfigurationId");

                    b.ToTable("FormFeeHistories");
                });

            modelBuilder.Entity("PMCRMS.API.Models.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ActionUrl")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("ActorName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("ActorRole")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int?>("ApplicationId")
                        .HasColumnType("integer");

                    b.Property<string>("ApplicationNumber")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsRead")
                        .HasColumnType("boolean");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<int>("Priority")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ReadAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("CreatedDate");

                    b.HasIndex("UserId", "IsRead");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("PMCRMS.API.Models.Officer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Department")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("EmployeeId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int?>("ExperienceMonths")
                        .HasColumnType("integer");

                    b.Property<int?>("InvitationId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("KeyLabel")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime?>("LastLoginAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("LockedUntil")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("LoginAttempts")
                        .HasColumnType("integer");

                    b.Property<bool>("MustChangePassword")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("PasswordChangedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("EmployeeId")
                        .IsUnique();

                    b.ToTable("Officers");
                });

            modelBuilder.Entity("PMCRMS.API.Models.OfficerInvitation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("AcceptedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Department")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("EmployeeId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("InvitedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("InvitedByAdminId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int?>("OfficerId")
                        .HasColumnType("integer");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("TemporaryPassword")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Email");

                    b.HasIndex("EmployeeId")
                        .IsUnique();

                    b.HasIndex("InvitedByAdminId");

                    b.HasIndex("OfficerId")
                        .IsUnique();

                    b.ToTable("OfficerInvitations");
                });

            modelBuilder.Entity("PMCRMS.API.Models.OtpVerification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AttemptCount")
                        .HasColumnType("integer");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ExpiryTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Identifier")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("boolean");

                    b.Property<string>("OtpCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("Purpose")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("SessionToken")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("VerifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Identifier", "Purpose", "IsActive");

                    b.ToTable("OtpVerifications");
                });

            modelBuilder.Entity("PMCRMS.API.Models.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("ApplicationId")
                        .HasColumnType("integer");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("FailureReason")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("GatewayPaymentId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("GatewayResponse")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("GatewayTransactionId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("Method")
                        .HasColumnType("integer");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PaymentId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int?>("ProcessedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ProcessedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ProcessingRemarks")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("TransactionId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("PaymentId")
                        .IsUnique();

                    b.HasIndex("ProcessedBy");

                    b.HasIndex("TransactionId")
                        .IsUnique();

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("PMCRMS.API.Models.PositionApplication", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AEArchitectApprovalComments")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<DateTime?>("AEArchitectApprovalDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool?>("AEArchitectApprovalStatus")
                        .HasColumnType("boolean");

                    b.Property<bool>("AEArchitectDigitalSignatureApplied")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("AEArchitectDigitalSignatureDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("AEArchitectRejectionComments")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<DateTime?>("AEArchitectRejectionDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool?>("AEArchitectRejectionStatus")
                        .HasColumnType("boolean");

                    b.Property<string>("AELicenceApprovalComments")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<DateTime?>("AELicenceApprovalDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool?>("AELicenceApprovalStatus")
                        .HasColumnType("boolean");

                    b.Property<bool>("AELicenceDigitalSignatureApplied")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("AELicenceDigitalSignatureDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("AELicenceRejectionComments")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<DateTime?>("AELicenceRejectionDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool?>("AELicenceRejectionStatus")
                        .HasColumnType("boolean");

                    b.Property<string>("AEStructuralApprovalComments")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<DateTime?>("AEStructuralApprovalDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool?>("AEStructuralApprovalStatus")
                        .HasColumnType("boolean");

                    b.Property<bool>("AEStructuralDigitalSignatureApplied")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("AEStructuralDigitalSignatureDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("AEStructuralRejectionComments")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<DateTime?>("AEStructuralRejectionDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool?>("AEStructuralRejectionStatus")
                        .HasColumnType("boolean");

                    b.Property<string>("AESupervisor1ApprovalComments")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<DateTime?>("AESupervisor1ApprovalDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool?>("AESupervisor1ApprovalStatus")
                        .HasColumnType("boolean");

                    b.Property<bool>("AESupervisor1DigitalSignatureApplied")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("AESupervisor1DigitalSignatureDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("AESupervisor1RejectionComments")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<DateTime?>("AESupervisor1RejectionDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool?>("AESupervisor1RejectionStatus")
                        .HasColumnType("boolean");

                    b.Property<string>("AESupervisor2ApprovalComments")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<DateTime?>("AESupervisor2ApprovalDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool?>("AESupervisor2ApprovalStatus")
                        .HasColumnType("boolean");

                    b.Property<bool>("AESupervisor2DigitalSignatureApplied")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("AESupervisor2DigitalSignatureDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("AESupervisor2RejectionComments")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<DateTime?>("AESupervisor2RejectionDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool?>("AESupervisor2RejectionStatus")
                        .HasColumnType("boolean");

                    b.Property<string>("AadharCardNumber")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("character varying(12)");

                    b.Property<string>("ApplicationNumber")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime?>("ApprovedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("AssignedAEArchitectId")
                        .HasColumnType("integer");

                    b.Property<int?>("AssignedAELicenceId")
                        .HasColumnType("integer");

                    b.Property<int?>("AssignedAEStructuralId")
                        .HasColumnType("integer");

                    b.Property<int?>("AssignedAESupervisor1Id")
                        .HasColumnType("integer");

                    b.Property<int?>("AssignedAESupervisor2Id")
                        .HasColumnType("integer");

                    b.Property<int?>("AssignedCEStage2Id")
                        .HasColumnType("integer");

                    b.Property<int?>("AssignedCityEngineerId")
                        .HasColumnType("integer");

                    b.Property<int?>("AssignedClerkId")
                        .HasColumnType("integer");

                    b.Property<int?>("AssignedEEStage2Id")
                        .HasColumnType("integer");

                    b.Property<int?>("AssignedExecutiveEngineerId")
                        .HasColumnType("integer");

                    b.Property<int?>("AssignedJuniorEngineerId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("AssignedToAEArchitectDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("AssignedToAELicenceDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("AssignedToAEStructuralDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("AssignedToAESupervisor1Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("AssignedToAESupervisor2Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("AssignedToCEStage2Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("AssignedToCityEngineerDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("AssignedToClerkDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("AssignedToEEStage2Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("AssignedToExecutiveEngineerDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("AssignedToJEDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("BloodGroup")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<bool>("CEStage2DigitalSignatureApplied")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("CEStage2DigitalSignatureDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CityEngineerApprovalComments")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<DateTime?>("CityEngineerApprovalDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool?>("CityEngineerApprovalStatus")
                        .HasColumnType("boolean");

                    b.Property<bool>("CityEngineerDigitalSignatureApplied")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("CityEngineerDigitalSignatureDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CityEngineerRejectionComments")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<DateTime?>("CityEngineerRejectionDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool?>("CityEngineerRejectionStatus")
                        .HasColumnType("boolean");

                    b.Property<string>("ClerkApprovalComments")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<DateTime?>("ClerkApprovalDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool?>("ClerkApprovalStatus")
                        .HasColumnType("boolean");

                    b.Property<string>("ClerkRejectionComments")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<DateTime?>("ClerkRejectionDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool?>("ClerkRejectionStatus")
                        .HasColumnType("boolean");

                    b.Property<string>("CoaCardNumber")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("EEStage2DigitalSignatureApplied")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("EEStage2DigitalSignatureDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("ExecutiveEngineerApprovalComments")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<DateTime?>("ExecutiveEngineerApprovalDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool?>("ExecutiveEngineerApprovalStatus")
                        .HasColumnType("boolean");

                    b.Property<bool>("ExecutiveEngineerDigitalSignatureApplied")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ExecutiveEngineerDigitalSignatureDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ExecutiveEngineerRejectionComments")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<DateTime?>("ExecutiveEngineerRejectionDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool?>("ExecutiveEngineerRejectionStatus")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("Gender")
                        .HasColumnType("integer");

                    b.Property<decimal>("Height")
                        .HasColumnType("decimal(5,2)");

                    b.Property<bool>("IsRecommendationFormGenerated")
                        .HasColumnType("boolean");

                    b.Property<bool>("JEAllDocumentsVerified")
                        .HasColumnType("boolean");

                    b.Property<bool>("JEAppointmentScheduled")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("JEAppointmentScheduledDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("JEApprovalComments")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<DateTime?>("JEApprovalDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool?>("JEApprovalStatus")
                        .HasColumnType("boolean");

                    b.Property<string>("JEComments")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<bool>("JEDigitalSignatureApplied")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("JEDigitalSignatureDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("JEDocumentVerificationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("JERejectionComments")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<DateTime?>("JERejectionDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool?>("JERejectionStatus")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("MobileNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("MotherName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("PanCardNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<int>("PositionType")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("RecommendationFormGeneratedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("RecommendationFormGenerationAttempts")
                        .HasColumnType("integer");

                    b.Property<string>("RecommendationFormGenerationError")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<string>("Remarks")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("SubmittedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationNumber")
                        .IsUnique();

                    b.HasIndex("AssignedAEArchitectId");

                    b.HasIndex("AssignedAELicenceId");

                    b.HasIndex("AssignedAEStructuralId");

                    b.HasIndex("AssignedAESupervisor1Id");

                    b.HasIndex("AssignedAESupervisor2Id");

                    b.HasIndex("AssignedCEStage2Id");

                    b.HasIndex("AssignedCityEngineerId");

                    b.HasIndex("AssignedClerkId");

                    b.HasIndex("AssignedEEStage2Id");

                    b.HasIndex("AssignedExecutiveEngineerId");

                    b.HasIndex("AssignedJuniorEngineerId");

                    b.HasIndex("UserId");

                    b.HasIndex("Status", "AssignedJuniorEngineerId");

                    b.ToTable("PositionApplications");
                });

            modelBuilder.Entity("PMCRMS.API.Models.SEAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AddressLine1")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("AddressLine2")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("AddressLine3")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("AddressType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<int>("ApplicationId")
                        .HasColumnType("integer");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PinCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.ToTable("SEAddresses");
                });

            modelBuilder.Entity("PMCRMS.API.Models.SEDocument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ApplicationId")
                        .HasColumnType("integer");

                    b.Property<string>("ContentType")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("DocumentType")
                        .HasColumnType("integer");

                    b.Property<byte[]>("FileContent")
                        .HasColumnType("bytea");

                    b.Property<string>("FileId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("FilePath")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<decimal?>("FileSize")
                        .HasColumnType("decimal(10,2)");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("boolean");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("VerificationRemarks")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int?>("VerifiedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("VerifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("VerifiedBy");

                    b.ToTable("SEDocuments");
                });

            modelBuilder.Entity("PMCRMS.API.Models.SEExperience", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ApplicationId")
                        .HasColumnType("integer");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FileId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime>("ToDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("YearsOfExperience")
                        .HasColumnType("decimal(5,2)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.ToTable("SEExperiences");
                });

            modelBuilder.Entity("PMCRMS.API.Models.SEQualification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ApplicationId")
                        .HasColumnType("integer");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DegreeName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("FileId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("InstituteName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("PassingMonth")
                        .HasColumnType("integer");

                    b.Property<int>("Specialization")
                        .HasColumnType("integer");

                    b.Property<string>("UniversityName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("YearOfPassing")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.ToTable("SEQualifications");
                });

            modelBuilder.Entity("PMCRMS.API.Models.SystemAdmin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Department")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Designation")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("EmployeeId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSuperAdmin")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastLoginAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("LockedUntil")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("LoginAttempts")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("EmployeeId")
                        .IsUnique();

                    b.ToTable("SystemAdmins");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Department = "Administration",
                            Designation = "System Administrator",
                            Email = "pmc@mailinator.com",
                            EmployeeId = "ADMIN001",
                            IsActive = true,
                            IsSuperAdmin = true,
                            LoginAttempts = 0,
                            Name = "PMC Administrator",
                            PasswordHash = "",
                            PhoneNumber = "9999999999"
                        });
                });

            modelBuilder.Entity("PMCRMS.API.Models.SystemSettings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<byte[]>("BinaryData")
                        .HasColumnType("bytea");

                    b.Property<string>("ContentType")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("SettingKey")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("SettingValue")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("SystemSettings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BinaryData = new byte[] { 255, 216, 255, 224, 0, 16, 74, 70, 73, 70, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 255, 219, 0, 132, 0, 9, 6, 7, 8, 7, 6, 9, 8, 7, 8, 10, 10, 9, 11, 13, 22, 15, 13, 12, 12, 13, 27, 20, 21, 16, 22, 32, 29, 34, 34, 32, 29, 31, 31, 36, 40, 52, 44, 36, 38, 49, 39, 31, 31, 45, 61, 45, 49, 53, 55, 58, 58, 58, 35, 43, 63, 68, 63, 56, 67, 52, 57, 58, 55, 1, 10, 10, 10, 13, 12, 13, 26, 15, 15, 26, 55, 37, 31, 37, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 255, 192, 0, 17, 8, 0, 192, 0, 204, 3, 1, 17, 0, 2, 17, 1, 3, 17, 1, 255, 196, 0, 28, 0, 0, 0, 7, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 4, 5, 6, 7, 1, 8, 255, 196, 0, 67, 16, 0, 1, 3, 3, 2, 4, 3, 3, 10, 3, 6, 5, 5, 0, 0, 0, 1, 2, 3, 4, 0, 5, 17, 18, 33, 6, 49, 65, 81, 19, 34, 97, 20, 113, 129, 7, 21, 35, 50, 66, 82, 145, 161, 177, 209, 36, 193, 225, 23, 37, 67, 114, 130, 146, 22, 83, 98, 147, 240, 51, 53, 54, 84, 131, 255, 196, 0, 26, 1, 0, 2, 3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 3, 4, 5, 6, 255, 196, 0, 58, 17, 0, 2, 2, 1, 3, 2, 4, 3, 5, 6, 5, 5, 1, 0, 0, 0, 0, 1, 2, 3, 17, 4, 18, 33, 5, 49, 19, 65, 81, 97, 34, 50, 113, 20, 35, 129, 161, 209, 6, 21, 66, 82, 145, 177, 51, 114, 146, 193, 240, 52, 67, 98, 225, 241, 22, 255, 218, 0, 12, 3, 1, 0, 2, 17, 3, 17, 0, 63, 0, 220, 104, 0, 80, 0, 160, 1, 64, 2, 128, 5, 0, 10, 0, 20, 0, 85, 16, 156, 146, 64, 0, 111, 158, 148, 1, 87, 190, 113, 229, 146, 208, 84, 131, 35, 218, 30, 27, 120, 108, 239, 191, 190, 180, 87, 166, 178, 206, 123, 33, 92, 145, 91, 95, 25, 113, 69, 224, 233, 177, 218, 12, 118, 149, 201, 199, 134, 79, 191, 181, 52, 227, 165, 163, 252, 89, 231, 232, 74, 83, 125, 144, 153, 177, 113, 157, 203, 205, 112, 226, 5, 71, 7, 114, 134, 148, 70, 63, 219, 138, 162, 93, 87, 71, 95, 201, 12, 142, 169, 155, 57, 253, 156, 169, 239, 52, 219, 212, 151, 149, 220, 239, 250, 154, 169, 245, 214, 190, 90, 208, 203, 77, 234, 195, 127, 102, 80, 186, 92, 100, 103, 252, 162, 151, 247, 237, 159, 200, 79, 217, 151, 169, 193, 242, 127, 50, 55, 254, 221, 196, 18, 153, 244, 10, 82, 127, 67, 78, 186, 220, 95, 207, 90, 21, 233, 223, 147, 14, 33, 113, 229, 167, 120, 183, 52, 207, 64, 251, 46, 28, 146, 62, 59, 254, 117, 108, 117, 250, 27, 62, 104, 237, 21, 215, 52, 45, 31, 229, 10, 229, 110, 88, 111, 137, 44, 206, 53, 141, 139, 205, 13, 135, 194, 180, 42, 42, 183, 154, 166, 35, 202, 238, 139, 125, 147, 137, 237, 55, 164, 131, 6, 90, 20, 179, 254, 26, 182, 87, 225, 89, 231, 76, 235, 127, 18, 37, 52, 201, 145, 239, 170, 201, 59, 64, 2, 128, 5, 0, 10, 0, 20, 0, 40, 0, 80, 0, 160, 1, 64, 2, 128, 5, 0, 10, 0, 20, 0, 51, 64, 21, 238, 40, 226, 219, 111, 15, 51, 252, 67, 158, 36, 131, 245, 88, 66, 188, 223, 30, 213, 125, 58, 121, 218, 240, 136, 111, 5, 33, 71, 138, 56, 213, 90, 228, 58, 171, 109, 172, 156, 165, 41, 216, 168, 126, 167, 227, 83, 110, 179, 75, 163, 226, 43, 116, 134, 141, 83, 159, 62, 69, 130, 207, 194, 54, 139, 80, 11, 110, 56, 125, 241, 254, 51, 195, 89, 207, 160, 59, 10, 226, 234, 58, 150, 162, 254, 28, 176, 189, 141, 49, 162, 49, 39, 210, 2, 70, 2, 64, 29, 171, 6, 91, 238, 91, 128, 194, 160, 4, 31, 157, 18, 58, 194, 31, 146, 211, 107, 87, 36, 173, 96, 19, 86, 66, 169, 205, 102, 43, 34, 185, 36, 46, 8, 32, 16, 65, 7, 168, 164, 39, 40, 238, 64, 25, 36, 0, 58, 154, 156, 16, 206, 236, 122, 102, 160, 128, 175, 54, 135, 144, 80, 235, 104, 113, 39, 154, 84, 144, 65, 166, 82, 146, 124, 60, 16, 210, 125, 202, 173, 227, 128, 109, 178, 148, 95, 182, 45, 86, 249, 60, 193, 104, 157, 57, 247, 116, 174, 174, 159, 172, 93, 90, 197, 159, 20, 127, 50, 169, 82, 159, 97, 132, 94, 36, 226, 30, 17, 117, 49, 184, 145, 147, 54, 15, 213, 76, 148, 28, 144, 61, 255, 0, 189, 117, 96, 244, 250, 181, 154, 94, 37, 232, 103, 106, 81, 225, 154, 13, 158, 237, 10, 241, 17, 50, 96, 62, 151, 80, 121, 224, 238, 159, 66, 58, 86, 121, 194, 80, 120, 145, 41, 228, 127, 154, 66, 65, 64, 2, 128, 5, 0, 10, 0, 20, 0, 40, 0, 80, 0, 160, 1, 64, 2, 128, 56, 104, 2, 137, 198, 60, 108, 184, 178, 62, 104, 225, 244, 123, 69, 201, 103, 74, 148, 145, 144, 209, 253, 235, 85, 52, 69, 71, 196, 181, 226, 34, 183, 206, 16, 199, 135, 184, 61, 44, 63, 243, 149, 249, 98, 109, 193, 126, 99, 175, 204, 150, 207, 243, 62, 181, 204, 214, 245, 89, 88, 188, 58, 120, 143, 230, 106, 171, 78, 151, 50, 45, 201, 228, 0, 248, 87, 27, 234, 104, 236, 24, 26, 0, 103, 62, 237, 2, 0, 254, 42, 74, 16, 163, 201, 3, 117, 31, 112, 27, 154, 190, 173, 61, 182, 243, 8, 136, 231, 21, 220, 135, 159, 197, 46, 70, 66, 21, 26, 209, 41, 196, 56, 224, 109, 46, 190, 160, 202, 74, 137, 192, 216, 249, 177, 240, 173, 149, 116, 229, 38, 212, 172, 75, 30, 75, 159, 253, 126, 101, 82, 187, 216, 128, 112, 220, 99, 206, 190, 57, 57, 139, 126, 180, 4, 60, 232, 113, 149, 72, 33, 10, 24, 9, 71, 45, 182, 244, 174, 130, 240, 103, 10, 148, 28, 189, 59, 165, 207, 171, 41, 229, 55, 185, 11, 112, 244, 139, 219, 33, 214, 163, 75, 140, 204, 6, 210, 167, 181, 200, 103, 80, 104, 125, 192, 2, 201, 211, 214, 147, 87, 13, 52, 177, 41, 197, 185, 62, 48, 159, 127, 126, 196, 193, 203, 203, 177, 219, 143, 16, 203, 145, 17, 49, 36, 162, 20, 246, 229, 40, 54, 26, 66, 36, 69, 82, 178, 121, 130, 71, 243, 162, 173, 20, 33, 45, 201, 184, 227, 252, 178, 193, 46, 198, 214, 11, 131, 247, 8, 246, 123, 83, 47, 220, 143, 179, 33, 58, 91, 208, 146, 92, 33, 71, 96, 6, 6, 77, 114, 35, 84, 245, 22, 184, 215, 207, 119, 232, 93, 185, 69, 101, 142, 33, 207, 137, 57, 164, 57, 25, 246, 220, 75, 131, 41, 223, 4, 252, 41, 39, 85, 149, 54, 164, 177, 128, 220, 159, 96, 91, 103, 179, 112, 101, 110, 178, 149, 167, 67, 138, 109, 105, 113, 56, 41, 80, 230, 13, 77, 181, 58, 165, 135, 230, 74, 121, 23, 125, 150, 164, 180, 90, 125, 164, 186, 218, 134, 20, 133, 140, 131, 73, 25, 202, 15, 49, 120, 33, 172, 148, 75, 167, 13, 220, 56, 102, 89, 187, 240, 163, 170, 13, 3, 151, 161, 243, 219, 174, 59, 143, 78, 98, 189, 6, 147, 169, 66, 245, 225, 106, 87, 62, 76, 207, 58, 156, 121, 137, 111, 225, 30, 43, 135, 196, 145, 142, 129, 224, 204, 108, 125, 52, 117, 29, 211, 234, 59, 138, 178, 234, 29, 79, 216, 68, 242, 88, 179, 181, 82, 73, 218, 0, 20, 0, 40, 0, 80, 0, 160, 1, 64, 2, 128, 5, 0, 112, 242, 160, 10, 31, 31, 113, 99, 209, 92, 69, 146, 198, 75, 151, 39, 252, 170, 40, 220, 182, 15, 243, 173, 84, 83, 29, 174, 219, 120, 138, 33, 229, 240, 129, 194, 156, 52, 213, 141, 143, 17, 210, 28, 156, 230, 238, 186, 119, 193, 236, 13, 112, 250, 134, 190, 122, 153, 225, 113, 21, 217, 27, 42, 165, 69, 101, 247, 44, 25, 245, 248, 87, 57, 112, 94, 71, 174, 234, 150, 39, 186, 196, 198, 149, 29, 134, 210, 130, 137, 43, 32, 33, 197, 40, 227, 74, 122, 147, 203, 165, 105, 142, 158, 83, 130, 148, 57, 111, 203, 217, 122, 149, 185, 165, 44, 13, 111, 79, 188, 137, 77, 53, 34, 114, 32, 194, 120, 233, 14, 32, 121, 214, 174, 218, 185, 36, 85, 218, 104, 69, 193, 202, 49, 221, 47, 201, 126, 162, 77, 250, 246, 42, 174, 102, 217, 196, 45, 203, 75, 13, 165, 16, 156, 64, 113, 109, 171, 196, 46, 52, 225, 211, 168, 171, 184, 59, 252, 43, 173, 31, 190, 211, 184, 110, 121, 150, 113, 229, 134, 188, 177, 232, 103, 151, 18, 227, 200, 156, 149, 194, 57, 131, 59, 233, 215, 50, 98, 215, 174, 51, 143, 147, 150, 240, 114, 6, 123, 86, 26, 250, 158, 103, 14, 54, 199, 205, 47, 50, 215, 79, 12, 144, 145, 101, 118, 84, 201, 111, 45, 224, 129, 46, 18, 99, 184, 83, 185, 10, 29, 125, 213, 158, 58, 168, 194, 17, 138, 95, 44, 179, 248, 12, 235, 111, 34, 48, 56, 120, 7, 117, 76, 139, 29, 173, 17, 149, 29, 42, 142, 72, 75, 137, 61, 72, 239, 86, 91, 173, 120, 248, 27, 121, 121, 231, 215, 244, 21, 85, 234, 46, 237, 158, 83, 173, 218, 153, 117, 230, 220, 110, 19, 254, 34, 137, 24, 42, 72, 24, 79, 198, 171, 142, 166, 17, 118, 56, 166, 183, 47, 207, 60, 147, 225, 190, 14, 241, 141, 190, 85, 198, 210, 134, 161, 163, 196, 113, 18, 91, 116, 164, 16, 20, 82, 147, 190, 156, 237, 154, 158, 157, 116, 41, 185, 202, 126, 141, 127, 244, 45, 142, 87, 5, 114, 114, 31, 117, 81, 109, 254, 202, 155, 115, 192, 5, 162, 92, 135, 82, 218, 194, 117, 111, 141, 59, 31, 117, 116, 105, 148, 35, 155, 119, 111, 94, 139, 45, 126, 165, 45, 62, 221, 135, 54, 75, 148, 171, 122, 167, 220, 92, 74, 229, 217, 212, 246, 159, 106, 3, 11, 1, 35, 5, 205, 61, 71, 173, 87, 168, 162, 187, 20, 42, 249, 103, 142, 223, 237, 245, 38, 50, 113, 203, 242, 46, 112, 166, 49, 58, 50, 36, 197, 117, 14, 178, 224, 202, 86, 131, 144, 107, 145, 101, 115, 173, 184, 205, 97, 162, 229, 36, 214, 80, 184, 223, 221, 73, 192, 197, 39, 139, 56, 118, 68, 25, 67, 136, 120, 111, 45, 204, 100, 234, 117, 148, 127, 136, 158, 167, 250, 87, 115, 167, 107, 211, 94, 5, 252, 175, 47, 99, 53, 181, 227, 226, 69, 167, 132, 56, 146, 63, 17, 91, 67, 205, 144, 153, 8, 217, 230, 186, 164, 254, 213, 166, 250, 93, 82, 43, 79, 37, 130, 170, 36, 20, 0, 40, 0, 80, 0, 160, 1, 64, 2, 128, 5, 0, 87, 120, 219, 136, 219, 225, 235, 58, 221, 24, 50, 93, 5, 44, 163, 215, 189, 95, 69, 46, 217, 227, 200, 134, 240, 85, 56, 38, 202, 228, 116, 46, 237, 114, 202, 238, 18, 188, 196, 175, 154, 1, 254, 117, 205, 234, 186, 239, 18, 94, 13, 127, 42, 53, 233, 169, 219, 29, 207, 185, 110, 7, 110, 70, 184, 235, 208, 211, 129, 157, 226, 232, 197, 162, 33, 144, 240, 82, 207, 38, 218, 64, 202, 156, 56, 228, 5, 95, 167, 211, 189, 68, 246, 174, 222, 190, 133, 115, 154, 138, 201, 76, 184, 162, 109, 222, 20, 123, 139, 113, 164, 77, 113, 197, 33, 214, 222, 140, 176, 91, 139, 133, 110, 128, 140, 228, 168, 14, 117, 220, 169, 215, 68, 229, 76, 154, 142, 60, 159, 241, 103, 205, 190, 216, 50, 201, 185, 37, 34, 229, 21, 216, 215, 120, 4, 58, 195, 165, 189, 144, 182, 228, 178, 82, 73, 235, 177, 174, 36, 227, 45, 60, 254, 23, 202, 244, 121, 70, 136, 181, 52, 47, 14, 221, 14, 19, 107, 110, 44, 102, 155, 66, 206, 72, 9, 231, 73, 101, 214, 88, 211, 155, 206, 9, 80, 138, 29, 252, 77, 87, 223, 184, 216, 58, 40, 0, 117, 160, 14, 212, 144, 119, 166, 245, 4, 12, 175, 22, 198, 110, 214, 247, 98, 62, 19, 231, 73, 9, 115, 72, 37, 7, 184, 207, 90, 190, 139, 229, 76, 212, 226, 36, 224, 166, 176, 86, 248, 146, 209, 30, 221, 25, 135, 212, 211, 174, 90, 162, 198, 240, 158, 97, 183, 188, 60, 36, 28, 231, 215, 212, 87, 79, 73, 169, 157, 211, 146, 77, 41, 201, 231, 56, 201, 77, 144, 219, 244, 35, 35, 220, 31, 179, 184, 155, 146, 126, 134, 85, 197, 65, 108, 217, 144, 130, 117, 49, 176, 7, 29, 21, 140, 26, 211, 58, 99, 122, 240, 159, 49, 135, 14, 111, 215, 191, 244, 17, 61, 188, 151, 235, 109, 193, 139, 148, 68, 200, 140, 73, 73, 217, 73, 35, 10, 65, 234, 8, 232, 69, 112, 173, 170, 117, 73, 198, 93, 205, 17, 121, 67, 174, 124, 249, 85, 99, 25, 247, 17, 195, 127, 131, 239, 173, 241, 29, 173, 7, 216, 221, 88, 76, 166, 71, 45, 249, 156, 87, 163, 233, 218, 149, 169, 175, 236, 246, 119, 93, 140, 150, 195, 107, 202, 52, 171, 116, 246, 46, 48, 217, 151, 21, 65, 108, 188, 144, 164, 145, 81, 40, 184, 188, 50, 23, 35, 170, 80, 5, 0, 10, 0, 20, 0, 40, 0, 80, 1, 22, 176, 132, 169, 75, 217, 32, 100, 158, 194, 128, 50, 98, 226, 184, 199, 140, 28, 150, 230, 85, 110, 130, 116, 182, 15, 37, 17, 203, 243, 222, 175, 214, 221, 246, 61, 50, 138, 249, 165, 255, 0, 25, 101, 21, 248, 147, 207, 146, 46, 201, 63, 133, 121, 99, 165, 129, 68, 145, 251, 82, 144, 209, 1, 125, 181, 73, 114, 66, 110, 13, 235, 146, 226, 28, 72, 12, 133, 105, 210, 208, 250, 201, 79, 169, 219, 53, 210, 210, 234, 97, 24, 58, 159, 194, 154, 124, 251, 153, 172, 173, 247, 65, 184, 118, 209, 46, 12, 201, 19, 86, 176, 195, 51, 10, 156, 92, 36, 238, 26, 86, 124, 186, 79, 67, 142, 116, 107, 53, 85, 219, 5, 5, 203, 143, 27, 189, 72, 174, 185, 69, 228, 177, 15, 252, 222, 185, 217, 201, 121, 209, 65, 1, 92, 117, 13, 39, 82, 212, 18, 50, 6, 78, 220, 233, 146, 207, 98, 27, 192, 202, 85, 234, 28, 59, 146, 97, 73, 112, 52, 165, 53, 226, 5, 168, 224, 98, 173, 133, 50, 156, 119, 68, 71, 52, 158, 2, 67, 226, 59, 84, 197, 41, 49, 229, 5, 105, 231, 177, 161, 209, 98, 242, 13, 232, 93, 203, 196, 6, 206, 12, 148, 21, 115, 210, 147, 147, 81, 224, 89, 230, 131, 122, 26, 171, 138, 45, 136, 90, 18, 183, 177, 168, 227, 56, 229, 86, 125, 146, 205, 187, 133, 118, 34, 101, 167, 16, 235, 105, 113, 181, 5, 33, 67, 41, 35, 145, 21, 157, 166, 158, 24, 233, 228, 227, 205, 54, 243, 101, 183, 155, 67, 136, 60, 210, 180, 228, 31, 133, 76, 100, 226, 242, 187, 144, 214, 72, 14, 45, 134, 210, 195, 18, 216, 138, 235, 151, 48, 124, 56, 174, 180, 112, 91, 36, 231, 39, 210, 186, 26, 11, 92, 91, 139, 120, 135, 118, 159, 153, 77, 176, 93, 215, 113, 126, 29, 177, 61, 108, 113, 201, 82, 102, 184, 244, 169, 35, 50, 83, 176, 66, 149, 208, 129, 233, 73, 171, 213, 70, 228, 161, 24, 226, 43, 183, 208, 152, 65, 174, 228, 245, 98, 44, 16, 155, 17, 153, 208, 221, 139, 33, 58, 153, 117, 37, 42, 7, 181, 61, 118, 58, 230, 167, 30, 232, 134, 178, 84, 62, 79, 230, 59, 99, 190, 202, 225, 121, 203, 202, 117, 21, 197, 61, 8, 231, 129, 239, 27, 215, 168, 181, 199, 81, 76, 117, 17, 49, 99, 108, 176, 105, 0, 214, 65, 142, 208, 0, 160, 1, 64, 2, 128, 5, 0, 84, 62, 83, 111, 10, 181, 112, 218, 219, 101, 68, 72, 152, 175, 5, 24, 230, 1, 230, 127, 15, 214, 180, 233, 107, 223, 102, 95, 100, 44, 187, 112, 69, 112, 165, 188, 91, 44, 236, 53, 128, 28, 88, 214, 190, 228, 154, 225, 117, 13, 71, 218, 53, 18, 159, 146, 225, 29, 106, 43, 80, 134, 9, 176, 107, 9, 107, 65, 193, 245, 160, 140, 10, 3, 80, 35, 65, 210, 125, 77, 25, 98, 224, 48, 160, 1, 156, 80, 65, 154, 189, 113, 187, 113, 90, 174, 44, 181, 41, 49, 161, 182, 20, 80, 222, 58, 36, 236, 115, 220, 154, 221, 5, 26, 218, 108, 123, 106, 81, 171, 62, 108, 169, 191, 119, 92, 214, 25, 149, 123, 90, 151, 37, 143, 163, 67, 106, 219, 86, 9, 220, 158, 213, 171, 106, 79, 108, 12, 9, 241, 153, 6, 107, 137, 38, 46, 56, 139, 106, 202, 50, 124, 235, 97, 172, 156, 118, 38, 172, 132, 33, 91, 247, 34, 83, 148, 254, 130, 150, 197, 220, 155, 186, 248, 143, 248, 142, 228, 20, 37, 74, 35, 59, 210, 221, 61, 209, 105, 48, 132, 94, 121, 35, 222, 110, 106, 238, 10, 50, 130, 27, 8, 81, 35, 86, 199, 225, 222, 158, 185, 102, 60, 16, 227, 201, 186, 240, 243, 101, 171, 44, 36, 156, 231, 194, 73, 58, 134, 251, 239, 92, 139, 165, 186, 108, 209, 5, 132, 73, 85, 99, 2, 128, 193, 208, 104, 3, 185, 160, 131, 180, 1, 71, 249, 73, 132, 228, 113, 15, 136, 33, 121, 100, 66, 113, 33, 74, 28, 200, 206, 223, 159, 235, 93, 206, 143, 114, 204, 180, 242, 237, 46, 198, 107, 163, 198, 75, 245, 162, 115, 119, 59, 108, 105, 204, 159, 35, 237, 133, 227, 177, 35, 113, 240, 171, 231, 29, 178, 113, 101, 104, 123, 74, 0, 160, 1, 64, 2, 128, 5, 0, 101, 92, 104, 239, 207, 63, 40, 16, 109, 153, 212, 196, 52, 5, 56, 51, 182, 126, 177, 254, 66, 181, 74, 126, 6, 138, 86, 121, 190, 6, 166, 59, 237, 72, 178, 164, 246, 175, 40, 118, 240, 29, 42, 168, 20, 81, 38, 129, 89, 199, 164, 53, 29, 178, 227, 202, 9, 72, 234, 105, 161, 92, 166, 246, 197, 114, 87, 57, 168, 172, 178, 49, 60, 68, 133, 201, 66, 25, 97, 74, 104, 130, 165, 173, 74, 3, 66, 71, 51, 250, 86, 169, 232, 246, 71, 45, 242, 103, 174, 215, 108, 241, 20, 74, 91, 238, 17, 167, 178, 28, 140, 242, 86, 9, 199, 99, 89, 37, 22, 139, 135, 124, 197, 41, 5, 31, 142, 99, 69, 225, 238, 19, 148, 45, 109, 120, 10, 144, 224, 11, 90, 73, 39, 125, 206, 230, 182, 105, 219, 178, 204, 50, 189, 69, 146, 113, 203, 51, 200, 183, 182, 238, 54, 230, 217, 91, 45, 73, 144, 132, 131, 165, 196, 13, 149, 215, 126, 181, 166, 80, 217, 143, 37, 234, 81, 25, 239, 94, 163, 103, 110, 147, 7, 209, 188, 22, 200, 28, 144, 148, 105, 0, 124, 54, 167, 217, 23, 217, 134, 236, 112, 209, 53, 195, 86, 89, 87, 104, 243, 101, 167, 86, 80, 194, 139, 97, 103, 35, 223, 142, 231, 167, 198, 170, 182, 105, 36, 139, 96, 185, 203, 44, 252, 57, 197, 182, 22, 237, 145, 163, 93, 162, 233, 151, 28, 99, 82, 154, 215, 147, 220, 30, 134, 178, 207, 114, 121, 76, 217, 45, 27, 111, 40, 180, 217, 248, 186, 207, 117, 120, 49, 29, 213, 182, 225, 217, 41, 116, 99, 53, 78, 214, 69, 154, 91, 43, 91, 159, 111, 98, 192, 51, 215, 111, 74, 131, 50, 13, 64, 2, 128, 6, 104, 0, 212, 16, 53, 186, 194, 69, 198, 219, 42, 27, 128, 105, 125, 165, 35, 39, 161, 198, 199, 241, 171, 168, 179, 194, 182, 51, 94, 76, 89, 199, 43, 5, 127, 228, 138, 114, 220, 179, 72, 182, 63, 159, 22, 11, 234, 78, 253, 137, 253, 193, 175, 79, 172, 95, 20, 108, 95, 196, 140, 81, 47, 213, 140, 96, 80, 0, 160, 1, 64, 28, 81, 192, 36, 244, 160, 12, 127, 134, 214, 103, 241, 85, 234, 228, 173, 206, 178, 132, 147, 234, 127, 97, 71, 87, 150, 205, 61, 117, 126, 38, 189, 4, 115, 57, 72, 182, 131, 94, 120, 234, 7, 73, 160, 86, 134, 215, 57, 82, 35, 50, 149, 69, 97, 79, 184, 165, 105, 9, 77, 106, 210, 213, 85, 141, 248, 143, 6, 109, 68, 231, 4, 182, 44, 144, 23, 244, 222, 36, 168, 184, 219, 1, 105, 105, 35, 83, 77, 171, 37, 39, 27, 251, 235, 102, 157, 85, 82, 206, 123, 249, 152, 238, 141, 147, 250, 250, 20, 228, 221, 102, 70, 75, 193, 216, 114, 28, 104, 167, 233, 198, 130, 20, 141, 246, 216, 243, 21, 110, 162, 57, 73, 166, 26, 127, 131, 42, 72, 100, 239, 22, 71, 182, 205, 134, 237, 185, 107, 72, 65, 14, 56, 206, 112, 86, 115, 200, 142, 149, 158, 48, 148, 243, 184, 186, 118, 87, 21, 136, 154, 247, 9, 95, 255, 0, 226, 59, 89, 156, 97, 191, 23, 10, 211, 165, 196, 224, 43, 212, 119, 21, 130, 234, 188, 41, 99, 57, 38, 185, 239, 93, 136, 159, 149, 100, 149, 112, 170, 249, 103, 196, 21, 110, 139, 252, 66, 189, 71, 200, 96, 17, 221, 113, 135, 82, 226, 22, 82, 176, 118, 80, 53, 215, 146, 78, 56, 102, 36, 218, 121, 45, 208, 110, 115, 20, 192, 147, 113, 82, 4, 127, 170, 192, 32, 106, 121, 67, 176, 237, 220, 214, 73, 85, 15, 225, 53, 66, 82, 198, 101, 216, 155, 249, 63, 226, 87, 45, 188, 68, 248, 184, 171, 17, 165, 39, 74, 254, 234, 59, 31, 117, 77, 250, 124, 215, 192, 177, 177, 238, 228, 185, 94, 248, 6, 44, 231, 149, 42, 215, 32, 48, 167, 60, 225, 60, 210, 115, 218, 185, 155, 218, 225, 157, 90, 181, 109, 47, 137, 100, 162, 92, 109, 179, 45, 19, 204, 105, 200, 240, 100, 160, 229, 167, 19, 201, 93, 136, 61, 169, 251, 242, 111, 170, 202, 237, 92, 63, 249, 238, 104, 60, 31, 198, 77, 204, 67, 80, 174, 106, 209, 40, 121, 66, 250, 43, 250, 213, 82, 70, 45, 70, 151, 11, 124, 59, 122, 122, 23, 68, 168, 41, 57, 74, 146, 161, 232, 115, 80, 96, 65, 254, 57, 160, 1, 64, 0, 80, 1, 170, 72, 41, 60, 47, 253, 217, 242, 153, 118, 132, 60, 173, 202, 30, 42, 71, 191, 127, 215, 53, 234, 43, 151, 139, 161, 174, 126, 107, 131, 11, 88, 155, 52, 170, 206, 72, 40, 0, 80, 0, 160, 6, 151, 55, 11, 86, 233, 46, 3, 186, 90, 81, 252, 170, 98, 179, 36, 6, 81, 192, 35, 251, 190, 83, 231, 235, 187, 32, 231, 224, 5, 81, 215, 31, 223, 198, 62, 199, 71, 167, 47, 187, 111, 220, 181, 36, 239, 92, 83, 120, 160, 53, 4, 7, 10, 232, 58, 208, 64, 217, 104, 146, 155, 135, 136, 200, 71, 132, 82, 53, 21, 26, 215, 27, 161, 224, 120, 109, 25, 157, 111, 126, 226, 151, 198, 124, 73, 110, 188, 179, 34, 213, 4, 188, 74, 92, 78, 185, 76, 227, 0, 164, 130, 82, 58, 157, 170, 221, 61, 18, 135, 197, 46, 198, 75, 173, 79, 136, 140, 35, 219, 97, 202, 64, 125, 109, 198, 145, 225, 167, 202, 145, 245, 207, 192, 245, 169, 217, 98, 127, 9, 124, 103, 83, 143, 43, 144, 239, 77, 185, 67, 121, 58, 100, 62, 71, 135, 169, 44, 41, 100, 132, 116, 24, 197, 89, 42, 211, 93, 185, 40, 140, 246, 75, 142, 71, 252, 71, 62, 100, 190, 28, 92, 73, 108, 41, 194, 225, 5, 10, 234, 159, 127, 173, 69, 112, 143, 22, 37, 131, 69, 208, 82, 173, 191, 51, 48, 143, 111, 102, 26, 61, 174, 240, 62, 143, 155, 49, 185, 41, 239, 217, 63, 173, 105, 115, 111, 225, 137, 130, 48, 194, 221, 63, 232, 35, 42, 115, 183, 7, 131, 142, 16, 146, 7, 209, 160, 114, 64, 236, 7, 106, 18, 218, 43, 155, 108, 150, 128, 177, 53, 189, 41, 90, 90, 154, 200, 242, 21, 114, 117, 61, 82, 106, 200, 181, 140, 50, 90, 221, 201, 110, 225, 30, 62, 126, 214, 68, 57, 44, 184, 252, 97, 157, 72, 207, 157, 128, 57, 224, 245, 21, 146, 237, 26, 179, 149, 220, 120, 219, 142, 25, 123, 226, 75, 92, 110, 44, 177, 38, 76, 2, 149, 184, 17, 174, 58, 199, 95, 250, 77, 115, 112, 235, 150, 217, 27, 105, 181, 65, 238, 242, 40, 49, 33, 162, 43, 137, 14, 60, 226, 46, 72, 63, 70, 80, 141, 89, 244, 35, 189, 78, 31, 161, 190, 203, 188, 78, 123, 47, 95, 83, 70, 225, 91, 68, 219, 127, 137, 38, 227, 36, 173, 231, 144, 0, 100, 103, 13, 245, 63, 26, 89, 56, 227, 8, 193, 100, 247, 60, 22, 17, 72, 32, 106, 130, 1, 82, 7, 71, 58, 8, 40, 247, 79, 225, 126, 84, 237, 47, 242, 241, 216, 8, 62, 184, 42, 253, 235, 210, 116, 215, 187, 67, 53, 232, 255, 0, 67, 37, 191, 57, 166, 117, 164, 20, 237, 0, 10, 0, 20, 1, 27, 196, 36, 166, 201, 60, 167, 159, 128, 175, 210, 158, 191, 157, 1, 152, 240, 25, 254, 226, 255, 0, 246, 95, 235, 88, 186, 215, 253, 91, 250, 35, 171, 211, 191, 192, 252, 89, 101, 6, 185, 38, 214, 131, 164, 208, 43, 20, 73, 168, 33, 161, 173, 225, 75, 22, 169, 126, 26, 244, 43, 194, 86, 253, 182, 171, 41, 89, 177, 34, 171, 99, 152, 225, 25, 163, 118, 232, 172, 219, 209, 37, 104, 26, 84, 124, 169, 207, 49, 222, 187, 109, 121, 149, 215, 76, 54, 172, 172, 135, 68, 104, 239, 197, 87, 179, 58, 91, 124, 114, 212, 114, 8, 237, 89, 167, 9, 46, 87, 40, 174, 202, 163, 37, 240, 112, 41, 28, 22, 100, 37, 50, 93, 11, 90, 144, 66, 150, 59, 103, 149, 46, 100, 211, 109, 8, 244, 242, 142, 55, 62, 88, 181, 202, 92, 143, 12, 165, 167, 209, 164, 39, 0, 13, 200, 252, 106, 184, 207, 45, 41, 26, 172, 114, 113, 202, 121, 51, 155, 171, 50, 61, 173, 110, 58, 29, 112, 171, 237, 145, 159, 206, 183, 197, 197, 112, 142, 51, 114, 147, 203, 25, 3, 130, 13, 75, 20, 150, 130, 166, 228, 4, 49, 14, 43, 166, 105, 228, 176, 177, 164, 84, 50, 83, 121, 224, 115, 62, 28, 216, 114, 153, 101, 108, 1, 33, 227, 161, 75, 109, 192, 189, 89, 233, 181, 27, 182, 242, 28, 179, 66, 225, 11, 202, 120, 100, 195, 137, 43, 34, 60, 151, 52, 41, 33, 89, 13, 40, 242, 53, 130, 250, 252, 70, 218, 53, 65, 236, 73, 26, 60, 132, 192, 132, 183, 46, 114, 18, 195, 75, 8, 243, 72, 59, 109, 219, 53, 130, 42, 82, 248, 81, 115, 120, 69, 18, 249, 242, 142, 218, 150, 226, 45, 175, 162, 58, 1, 194, 28, 82, 53, 41, 126, 160, 116, 21, 208, 171, 68, 187, 204, 205, 59, 189, 9, 158, 7, 226, 103, 110, 218, 163, 76, 113, 14, 175, 73, 40, 113, 35, 115, 142, 96, 250, 242, 170, 181, 84, 70, 190, 98, 61, 118, 110, 69, 200, 109, 88, 203, 142, 212, 16, 10, 144, 40, 252, 87, 255, 0, 207, 56, 111, 28, 243, 191, 226, 43, 208, 244, 159, 250, 91, 12, 151, 124, 232, 211, 69, 64, 135, 106, 64, 20, 0, 40, 1, 173, 201, 175, 104, 183, 201, 107, 239, 52, 161, 249, 84, 197, 226, 64, 204, 143, 129, 151, 162, 12, 168, 170, 250, 204, 200, 87, 231, 253, 106, 142, 185, 31, 190, 140, 253, 87, 246, 58, 157, 49, 230, 182, 189, 203, 58, 77, 113, 78, 139, 65, 193, 160, 86, 40, 147, 64, 172, 135, 227, 9, 5, 171, 49, 109, 36, 130, 242, 210, 222, 64, 233, 204, 254, 149, 171, 73, 12, 217, 159, 66, 155, 30, 10, 141, 250, 21, 198, 225, 5, 207, 154, 90, 215, 236, 237, 167, 41, 78, 219, 30, 213, 209, 157, 145, 131, 73, 149, 94, 228, 170, 248, 123, 149, 88, 55, 41, 12, 62, 27, 154, 133, 180, 233, 216, 18, 156, 103, 223, 79, 156, 152, 107, 187, 226, 231, 185, 38, 235, 235, 83, 199, 200, 133, 54, 19, 130, 15, 239, 89, 237, 154, 70, 247, 25, 93, 36, 229, 194, 67, 152, 45, 184, 173, 100, 128, 2, 198, 218, 185, 19, 208, 10, 169, 70, 77, 38, 53, 202, 9, 253, 217, 197, 161, 81, 20, 132, 165, 149, 150, 136, 36, 13, 89, 41, 199, 63, 125, 61, 148, 74, 75, 114, 124, 153, 35, 5, 217, 12, 110, 252, 59, 18, 76, 100, 79, 138, 162, 131, 144, 28, 74, 54, 7, 60, 149, 142, 157, 169, 43, 182, 112, 248, 102, 83, 101, 81, 238, 133, 109, 118, 24, 214, 216, 74, 157, 112, 113, 73, 67, 190, 70, 80, 181, 4, 151, 79, 127, 112, 171, 156, 230, 214, 112, 86, 162, 147, 192, 230, 209, 2, 50, 159, 63, 54, 176, 167, 94, 220, 231, 57, 199, 250, 142, 194, 170, 219, 116, 215, 37, 185, 132, 123, 21, 233, 215, 52, 151, 10, 60, 63, 59, 106, 206, 74, 178, 2, 179, 154, 210, 160, 252, 202, 165, 98, 108, 127, 118, 190, 222, 120, 141, 240, 137, 15, 173, 76, 140, 104, 108, 12, 36, 15, 117, 44, 43, 133, 124, 165, 200, 178, 148, 164, 196, 29, 138, 136, 114, 92, 101, 75, 143, 32, 52, 148, 169, 204, 28, 235, 39, 114, 156, 247, 30, 149, 114, 203, 17, 180, 184, 47, 159, 38, 240, 91, 129, 197, 243, 227, 70, 37, 81, 209, 29, 46, 160, 40, 228, 167, 95, 74, 197, 174, 120, 173, 125, 75, 169, 92, 154, 150, 221, 43, 150, 107, 58, 40, 32, 20, 16, 82, 174, 127, 197, 124, 169, 218, 88, 230, 24, 142, 23, 183, 76, 149, 126, 213, 233, 122, 114, 219, 161, 148, 189, 89, 142, 239, 241, 13, 46, 144, 83, 180, 0, 40, 3, 153, 223, 20, 1, 86, 226, 222, 52, 131, 195, 223, 64, 18, 100, 206, 80, 242, 176, 142, 159, 230, 63, 202, 180, 83, 167, 149, 139, 115, 120, 68, 54, 80, 56, 93, 153, 194, 227, 50, 107, 241, 210, 195, 50, 188, 218, 51, 201, 89, 206, 194, 178, 245, 123, 233, 156, 35, 92, 30, 90, 58, 157, 58, 155, 33, 39, 41, 44, 38, 89, 193, 174, 17, 212, 97, 193, 168, 21, 161, 68, 154, 4, 100, 87, 21, 197, 246, 187, 59, 133, 59, 173, 147, 226, 1, 223, 21, 167, 75, 61, 182, 21, 216, 184, 201, 29, 195, 19, 80, 153, 45, 172, 29, 45, 72, 70, 158, 123, 2, 43, 86, 170, 10, 80, 201, 43, 152, 101, 14, 120, 146, 253, 110, 133, 1, 79, 199, 105, 135, 230, 231, 75, 67, 72, 216, 247, 57, 172, 112, 140, 228, 210, 111, 130, 135, 8, 119, 193, 82, 155, 20, 183, 25, 199, 229, 172, 187, 49, 214, 66, 220, 202, 64, 74, 84, 174, 128, 122, 10, 232, 85, 24, 37, 148, 130, 184, 183, 150, 59, 90, 130, 178, 157, 177, 228, 192, 61, 180, 213, 205, 134, 222, 18, 13, 51, 13, 188, 194, 82, 146, 124, 225, 36, 115, 219, 173, 74, 120, 42, 154, 219, 200, 249, 187, 27, 16, 225, 27, 133, 237, 56, 140, 19, 129, 27, 25, 47, 28, 237, 159, 194, 163, 187, 41, 147, 118, 124, 49, 42, 87, 178, 255, 0, 17, 200, 246, 150, 93, 13, 150, 134, 134, 226, 40, 96, 54, 158, 201, 164, 118, 109, 120, 145, 68, 170, 121, 247, 68, 42, 159, 117, 165, 123, 52, 181, 73, 0, 28, 41, 164, 249, 79, 227, 76, 176, 249, 69, 124, 174, 7, 78, 69, 136, 22, 94, 91, 9, 142, 156, 13, 44, 133, 106, 199, 188, 212, 110, 203, 224, 158, 16, 155, 102, 76, 217, 104, 133, 107, 100, 169, 215, 149, 165, 40, 31, 107, 227, 208, 83, 113, 21, 185, 137, 203, 120, 69, 223, 136, 56, 22, 61, 151, 130, 131, 202, 82, 92, 185, 54, 226, 22, 243, 232, 24, 27, 157, 210, 61, 63, 90, 199, 78, 169, 217, 118, 60, 139, 39, 86, 216, 103, 204, 157, 249, 46, 97, 107, 93, 218, 228, 224, 30, 119, 18, 202, 49, 247, 82, 63, 173, 38, 186, 92, 164, 139, 41, 69, 250, 185, 230, 131, 180, 1, 209, 65, 5, 47, 133, 63, 189, 62, 82, 174, 243, 134, 237, 197, 30, 10, 85, 211, 109, 191, 92, 215, 170, 132, 124, 45, 21, 112, 243, 124, 255, 0, 83, 159, 39, 155, 27, 52, 186, 206, 72, 40, 0, 80, 5, 99, 143, 56, 144, 112, 245, 172, 150, 142, 169, 143, 249, 89, 71, 111, 90, 209, 166, 167, 196, 151, 61, 145, 12, 207, 172, 150, 178, 133, 155, 141, 196, 248, 211, 30, 58, 201, 86, 250, 127, 173, 96, 234, 58, 247, 99, 240, 171, 226, 43, 243, 59, 90, 45, 18, 173, 111, 159, 127, 236, 79, 133, 111, 220, 122, 215, 35, 7, 69, 160, 233, 85, 64, 173, 10, 36, 208, 64, 112, 106, 5, 104, 62, 18, 176, 82, 161, 144, 122, 119, 169, 79, 28, 161, 36, 178, 176, 202, 69, 201, 135, 45, 151, 21, 179, 31, 70, 159, 253, 70, 247, 237, 208, 14, 245, 209, 133, 170, 80, 228, 229, 111, 179, 79, 61, 144, 229, 49, 243, 118, 171, 125, 210, 225, 21, 231, 228, 12, 17, 168, 178, 118, 57, 28, 197, 103, 115, 148, 83, 193, 169, 62, 112, 198, 215, 152, 210, 110, 55, 9, 38, 28, 87, 156, 66, 128, 66, 112, 140, 3, 141, 185, 214, 218, 150, 32, 144, 222, 53, 113, 243, 29, 91, 120, 78, 107, 238, 183, 237, 78, 54, 214, 16, 157, 73, 73, 212, 172, 142, 124, 182, 171, 84, 151, 169, 68, 181, 13, 44, 96, 154, 123, 230, 155, 38, 84, 0, 149, 44, 3, 141, 243, 130, 61, 104, 43, 133, 83, 183, 150, 202, 196, 171, 171, 215, 37, 186, 39, 43, 86, 161, 169, 29, 147, 208, 129, 238, 63, 173, 58, 89, 53, 85, 21, 5, 130, 182, 35, 60, 153, 165, 232, 173, 151, 116, 39, 233, 18, 158, 122, 115, 218, 145, 165, 55, 180, 201, 171, 123, 26, 107, 185, 41, 53, 168, 79, 69, 50, 37, 128, 148, 54, 159, 42, 136, 243, 165, 93, 189, 107, 50, 202, 150, 212, 86, 210, 146, 77, 240, 85, 159, 205, 194, 67, 77, 219, 18, 244, 151, 220, 32, 6, 210, 140, 148, 159, 81, 251, 214, 181, 21, 21, 153, 112, 138, 44, 81, 237, 7, 147, 78, 225, 91, 36, 46, 7, 130, 110, 156, 64, 250, 17, 49, 255, 0, 46, 64, 200, 108, 125, 212, 227, 173, 115, 111, 182, 87, 189, 149, 246, 46, 174, 10, 181, 153, 21, 174, 50, 190, 78, 226, 34, 185, 44, 120, 141, 89, 90, 120, 54, 206, 114, 144, 234, 187, 158, 231, 211, 166, 43, 77, 21, 70, 190, 60, 202, 236, 155, 151, 208, 191, 252, 156, 52, 182, 184, 97, 5, 196, 105, 43, 117, 75, 25, 230, 65, 60, 235, 14, 174, 89, 180, 190, 165, 136, 150, 142, 91, 86, 98, 211, 185, 160, 6, 151, 121, 232, 182, 218, 229, 77, 89, 24, 101, 178, 161, 234, 122, 15, 198, 175, 211, 212, 237, 186, 53, 175, 54, 36, 229, 182, 57, 33, 254, 73, 45, 235, 98, 194, 229, 193, 240, 124, 105, 207, 21, 146, 122, 142, 255, 0, 142, 107, 211, 107, 36, 183, 168, 46, 201, 24, 35, 234, 95, 43, 32, 192, 160, 14, 102, 128, 49, 187, 252, 163, 126, 227, 185, 69, 103, 84, 88, 10, 45, 33, 61, 50, 147, 131, 249, 231, 240, 173, 26, 171, 30, 155, 71, 199, 121, 26, 250, 125, 62, 45, 235, 61, 145, 40, 149, 111, 94, 107, 213, 30, 141, 161, 64, 106, 8, 104, 58, 77, 2, 180, 40, 149, 84, 11, 129, 64, 104, 21, 138, 36, 208, 43, 43, 215, 136, 211, 75, 205, 76, 45, 180, 231, 133, 157, 45, 160, 96, 156, 243, 207, 126, 149, 108, 26, 236, 100, 158, 232, 75, 115, 32, 91, 187, 54, 221, 213, 183, 212, 219, 141, 157, 69, 42, 26, 74, 114, 49, 211, 214, 180, 165, 136, 225, 51, 60, 172, 221, 44, 224, 154, 118, 254, 218, 27, 82, 219, 101, 107, 104, 13, 148, 234, 241, 168, 244, 192, 231, 86, 198, 165, 46, 92, 155, 31, 99, 243, 25, 185, 122, 184, 60, 222, 133, 172, 48, 128, 60, 69, 180, 200, 210, 57, 108, 9, 230, 107, 68, 99, 24, 246, 68, 194, 17, 79, 61, 196, 227, 0, 136, 158, 25, 59, 133, 157, 189, 226, 134, 95, 14, 34, 202, 245, 238, 83, 204, 33, 44, 198, 4, 190, 181, 106, 78, 7, 113, 191, 233, 75, 25, 59, 36, 240, 248, 70, 77, 93, 190, 18, 73, 119, 98, 182, 243, 46, 34, 90, 152, 147, 135, 6, 207, 32, 28, 159, 133, 60, 54, 47, 134, 39, 62, 110, 114, 123, 165, 220, 95, 138, 32, 42, 238, 196, 95, 155, 180, 141, 78, 12, 53, 203, 99, 207, 240, 59, 213, 83, 113, 166, 89, 125, 152, 203, 54, 172, 46, 232, 212, 184, 94, 197, 18, 195, 109, 98, 60, 118, 26, 15, 4, 15, 21, 212, 164, 101, 103, 169, 205, 114, 174, 182, 83, 150, 91, 53, 194, 9, 33, 14, 49, 180, 71, 187, 91, 155, 76, 185, 41, 143, 29, 135, 3, 174, 184, 174, 137, 28, 233, 180, 214, 184, 79, 142, 226, 219, 5, 37, 207, 98, 159, 26, 60, 94, 44, 226, 120, 209, 237, 186, 149, 99, 181, 161, 33, 41, 228, 146, 71, 51, 234, 73, 235, 214, 181, 74, 78, 170, 243, 47, 153, 148, 37, 190, 88, 242, 53, 4, 165, 41, 64, 66, 82, 18, 144, 54, 0, 99, 21, 206, 125, 205, 120, 192, 106, 50, 7, 69, 4, 20, 142, 62, 125, 219, 164, 200, 60, 51, 4, 229, 233, 78, 5, 59, 143, 178, 58, 103, 245, 174, 247, 71, 167, 106, 150, 166, 126, 75, 8, 201, 168, 151, 240, 163, 72, 183, 196, 110, 12, 38, 34, 48, 157, 45, 50, 128, 132, 143, 117, 93, 41, 57, 54, 217, 80, 230, 148, 1, 64, 5, 39, 25, 61, 168, 3, 12, 225, 163, 226, 74, 184, 60, 179, 151, 22, 233, 42, 61, 242, 73, 254, 116, 117, 174, 60, 53, 236, 118, 58, 58, 95, 27, 44, 0, 224, 123, 171, 132, 118, 88, 132, 41, 190, 211, 46, 82, 16, 82, 89, 104, 165, 41, 35, 158, 72, 201, 166, 107, 224, 76, 161, 55, 226, 56, 191, 68, 255, 0, 168, 252, 26, 65, 154, 20, 73, 163, 4, 52, 28, 42, 163, 2, 224, 80, 103, 159, 74, 5, 40, 156, 103, 54, 116, 155, 194, 97, 68, 82, 208, 150, 176, 162, 164, 156, 111, 91, 116, 209, 132, 98, 231, 35, 145, 170, 149, 146, 158, 213, 216, 99, 42, 83, 16, 157, 137, 21, 197, 251, 68, 169, 14, 0, 181, 172, 234, 231, 250, 83, 42, 221, 159, 22, 48, 138, 92, 182, 225, 121, 137, 92, 103, 139, 100, 228, 48, 242, 84, 177, 132, 169, 181, 157, 194, 59, 237, 86, 215, 84, 156, 124, 74, 199, 90, 149, 9, 109, 152, 229, 187, 140, 87, 25, 212, 219, 129, 77, 106, 202, 149, 157, 220, 87, 79, 133, 55, 141, 44, 225, 199, 147, 74, 178, 182, 183, 39, 192, 224, 135, 157, 11, 105, 8, 36, 171, 237, 244, 4, 243, 170, 101, 99, 152, 78, 244, 184, 136, 206, 65, 143, 13, 208, 167, 86, 95, 144, 18, 19, 182, 234, 56, 233, 232, 41, 226, 164, 227, 133, 194, 49, 63, 155, 123, 229, 137, 179, 99, 191, 223, 101, 54, 166, 99, 187, 17, 144, 172, 133, 159, 40, 247, 211, 248, 149, 212, 187, 137, 178, 115, 242, 44, 211, 108, 18, 108, 200, 10, 82, 156, 146, 21, 24, 165, 111, 30, 73, 115, 99, 200, 114, 206, 49, 154, 201, 61, 67, 181, 125, 13, 85, 213, 26, 251, 249, 143, 248, 119, 137, 231, 123, 99, 54, 199, 34, 184, 240, 212, 18, 21, 140, 41, 9, 238, 123, 213, 18, 130, 146, 114, 101, 179, 140, 99, 242, 151, 59, 132, 70, 174, 16, 95, 135, 33, 33, 77, 188, 217, 66, 135, 161, 170, 97, 45, 178, 77, 21, 202, 59, 150, 8, 222, 17, 176, 35, 135, 173, 134, 48, 88, 113, 213, 171, 83, 142, 1, 140, 244, 31, 128, 171, 111, 187, 197, 150, 88, 149, 214, 160, 137, 209, 84, 22, 29, 160, 129, 149, 222, 228, 197, 170, 222, 252, 217, 42, 1, 13, 39, 56, 251, 199, 160, 171, 244, 244, 202, 251, 21, 113, 238, 196, 156, 212, 22, 89, 11, 242, 111, 105, 122, 92, 137, 28, 77, 115, 78, 100, 202, 36, 51, 159, 178, 159, 74, 244, 247, 184, 213, 8, 209, 14, 200, 192, 185, 121, 102, 130, 6, 43, 33, 39, 104, 0, 80, 7, 15, 92, 80, 6, 32, 203, 6, 213, 197, 55, 107, 107, 128, 140, 60, 165, 55, 158, 101, 57, 37, 63, 150, 42, 206, 171, 7, 102, 158, 23, 47, 161, 211, 233, 19, 74, 114, 131, 243, 31, 92, 11, 166, 33, 75, 74, 41, 82, 207, 32, 55, 62, 130, 188, 241, 232, 16, 149, 154, 42, 225, 42, 66, 20, 189, 90, 180, 40, 164, 253, 147, 138, 111, 251, 107, 234, 80, 249, 190, 79, 217, 18, 201, 85, 40, 237, 10, 2, 113, 182, 245, 2, 52, 70, 95, 239, 6, 217, 28, 6, 82, 23, 33, 121, 210, 21, 201, 35, 239, 31, 74, 190, 138, 124, 87, 236, 99, 213, 234, 85, 17, 227, 185, 159, 162, 225, 196, 151, 73, 250, 225, 200, 125, 65, 89, 9, 32, 29, 254, 0, 236, 43, 165, 224, 214, 150, 48, 113, 93, 247, 73, 231, 32, 190, 205, 226, 8, 1, 175, 158, 116, 38, 75, 219, 37, 220, 121, 148, 128, 58, 142, 249, 35, 122, 174, 53, 83, 46, 222, 65, 109, 150, 197, 230, 107, 185, 4, 130, 234, 94, 76, 133, 168, 169, 121, 10, 212, 125, 14, 107, 71, 27, 112, 103, 203, 221, 147, 65, 114, 43, 23, 38, 217, 144, 82, 9, 208, 21, 184, 233, 233, 89, 104, 185, 84, 154, 102, 155, 43, 118, 225, 161, 177, 69, 174, 210, 149, 225, 180, 235, 27, 144, 48, 84, 175, 127, 106, 151, 101, 151, 118, 225, 2, 174, 186, 251, 242, 55, 180, 93, 31, 190, 223, 99, 66, 75, 126, 28, 53, 168, 234, 74, 14, 9, 72, 245, 231, 75, 56, 170, 160, 228, 187, 147, 9, 187, 38, 163, 228, 105, 240, 109, 54, 248, 35, 17, 98, 52, 131, 223, 25, 63, 137, 174, 116, 173, 156, 187, 179, 165, 26, 97, 31, 34, 69, 39, 96, 42, 162, 90, 15, 178, 129, 4, 2, 15, 48, 119, 205, 2, 180, 142, 161, 182, 194, 203, 129, 9, 11, 59, 106, 210, 51, 138, 27, 98, 224, 92, 43, 245, 168, 21, 160, 224, 230, 129, 67, 80, 64, 1, 160, 10, 61, 193, 151, 248, 191, 140, 62, 100, 89, 240, 160, 65, 33, 111, 140, 238, 229, 122, 126, 159, 92, 116, 218, 127, 27, 188, 165, 216, 231, 221, 39, 41, 109, 53, 22, 24, 110, 59, 40, 101, 148, 132, 54, 132, 132, 165, 35, 144, 21, 91, 231, 150, 40, 165, 0, 10, 0, 20, 0, 146, 158, 109, 32, 149, 56, 144, 6, 252, 232, 73, 176, 50, 79, 148, 91, 133, 154, 124, 166, 46, 118, 153, 237, 170, 115, 71, 74, 219, 0, 141, 105, 207, 126, 227, 149, 116, 104, 166, 114, 173, 215, 98, 248, 89, 17, 155, 174, 106, 113, 238, 18, 221, 45, 51, 34, 54, 250, 1, 26, 134, 227, 28, 141, 121, 141, 77, 14, 139, 93, 111, 200, 245, 218, 123, 149, 245, 43, 16, 170, 21, 137, 78, 12, 143, 170, 158, 158, 250, 175, 141, 160, 151, 222, 191, 162, 254, 227, 164, 170, 144, 177, 138, 37, 89, 56, 28, 232, 20, 160, 92, 229, 57, 115, 191, 202, 96, 234, 9, 75, 158, 16, 199, 97, 211, 241, 174, 189, 16, 197, 105, 35, 204, 234, 236, 114, 186, 77, 249, 23, 171, 92, 6, 109, 177, 155, 101, 166, 144, 149, 165, 62, 101, 129, 185, 62, 181, 143, 85, 115, 114, 217, 30, 199, 67, 69, 165, 81, 143, 137, 37, 203, 34, 120, 230, 198, 111, 54, 141, 81, 198, 101, 198, 58, 219, 7, 237, 14, 169, 164, 211, 90, 161, 44, 63, 49, 245, 250, 119, 109, 121, 93, 209, 156, 193, 64, 144, 199, 134, 70, 20, 21, 130, 57, 98, 186, 109, 243, 147, 135, 21, 184, 148, 185, 93, 101, 219, 224, 177, 13, 149, 163, 26, 8, 42, 28, 250, 213, 106, 184, 183, 150, 95, 99, 240, 210, 138, 100, 116, 180, 56, 204, 20, 133, 231, 218, 36, 159, 46, 163, 190, 59, 213, 172, 207, 150, 93, 254, 76, 172, 197, 191, 18, 228, 234, 124, 169, 79, 132, 201, 239, 220, 251, 171, 159, 172, 183, 248, 81, 208, 209, 84, 254, 119, 248, 26, 26, 77, 115, 205, 226, 137, 52, 16, 208, 116, 170, 160, 86, 133, 1, 160, 86, 131, 131, 80, 200, 98, 137, 52, 8, 208, 160, 59, 80, 41, 218, 8, 42, 22, 79, 162, 249, 88, 148, 145, 183, 139, 24, 147, 235, 176, 175, 81, 166, 121, 233, 209, 250, 156, 251, 87, 222, 51, 76, 170, 133, 5, 0, 10, 0, 20, 1, 230, 119, 46, 13, 131, 167, 218, 229, 171, 191, 210, 159, 222, 180, 174, 161, 103, 242, 34, 215, 69, 107, 205, 141, 149, 33, 151, 52, 181, 20, 56, 28, 90, 177, 169, 196, 130, 63, 165, 87, 102, 186, 217, 115, 216, 35, 8, 46, 23, 112, 210, 103, 92, 32, 55, 224, 181, 44, 156, 12, 148, 32, 99, 3, 56, 172, 82, 106, 233, 110, 153, 161, 219, 109, 81, 219, 25, 13, 126, 119, 184, 148, 165, 212, 201, 95, 159, 32, 224, 239, 181, 27, 35, 219, 5, 110, 251, 123, 231, 184, 188, 11, 165, 197, 215, 70, 37, 186, 157, 39, 25, 34, 162, 113, 134, 57, 68, 215, 117, 187, 179, 25, 22, 120, 151, 249, 17, 155, 208, 254, 100, 171, 59, 20, 163, 77, 102, 116, 197, 246, 102, 248, 235, 44, 138, 196, 185, 18, 225, 179, 25, 185, 242, 238, 111, 130, 86, 20, 167, 18, 146, 54, 3, 57, 207, 231, 93, 14, 208, 194, 57, 45, 238, 177, 183, 234, 89, 97, 222, 237, 211, 78, 25, 150, 130, 178, 119, 73, 56, 59, 215, 38, 116, 216, 158, 112, 122, 10, 245, 53, 75, 9, 50, 68, 29, 242, 121, 114, 170, 11, 204, 166, 240, 182, 88, 226, 11, 130, 163, 148, 248, 69, 205, 180, 242, 207, 90, 236, 215, 159, 13, 100, 243, 90, 141, 190, 51, 219, 216, 229, 182, 50, 30, 91, 183, 25, 200, 82, 227, 71, 73, 113, 72, 79, 92, 114, 4, 244, 201, 167, 202, 143, 12, 171, 108, 165, 150, 58, 176, 91, 36, 113, 93, 229, 201, 50, 135, 135, 25, 7, 10, 41, 27, 1, 247, 83, 85, 234, 46, 85, 175, 114, 237, 45, 14, 231, 236, 107, 17, 154, 110, 59, 72, 101, 132, 4, 54, 129, 165, 41, 79, 32, 43, 142, 219, 111, 44, 237, 168, 40, 172, 33, 112, 170, 130, 5, 18, 106, 8, 20, 73, 160, 86, 131, 164, 212, 10, 197, 18, 104, 21, 135, 73, 168, 100, 49, 64, 104, 17, 161, 64, 104, 20, 168, 216, 63, 139, 249, 83, 150, 243, 91, 166, 60, 114, 133, 31, 92, 10, 245, 52, 71, 103, 79, 138, 126, 108, 231, 88, 243, 99, 52, 202, 164, 80, 80, 0, 160, 1, 64, 30, 90, 117, 185, 105, 80, 88, 251, 217, 223, 28, 235, 59, 219, 216, 209, 137, 119, 10, 234, 31, 91, 138, 117, 193, 135, 9, 202, 143, 45, 233, 150, 59, 16, 242, 249, 36, 26, 109, 46, 177, 175, 195, 73, 39, 98, 86, 77, 82, 248, 101, 235, 50, 66, 137, 135, 129, 146, 203, 106, 199, 32, 157, 136, 163, 119, 184, 108, 246, 27, 197, 113, 200, 178, 220, 13, 70, 203, 152, 194, 16, 119, 197, 52, 146, 146, 238, 85, 7, 182, 92, 33, 234, 159, 152, 81, 226, 41, 182, 210, 64, 213, 184, 164, 81, 142, 75, 220, 166, 151, 35, 184, 209, 13, 167, 135, 181, 167, 75, 147, 37, 129, 177, 228, 148, 243, 63, 10, 211, 54, 146, 193, 146, 168, 202, 79, 113, 19, 224, 58, 103, 69, 90, 208, 145, 244, 169, 200, 30, 181, 78, 126, 22, 145, 118, 199, 190, 47, 220, 157, 226, 203, 251, 233, 90, 173, 86, 226, 82, 241, 217, 215, 6, 196, 109, 184, 31, 189, 85, 165, 211, 167, 247, 147, 252, 17, 167, 93, 172, 113, 251, 170, 255, 0, 22, 69, 112, 247, 10, 61, 112, 41, 122, 73, 44, 196, 207, 51, 245, 151, 238, 253, 234, 235, 181, 17, 175, 221, 255, 0, 99, 46, 155, 71, 59, 158, 95, 8, 153, 227, 27, 100, 132, 90, 25, 131, 103, 136, 125, 156, 18, 167, 3, 92, 201, 28, 179, 222, 168, 211, 216, 165, 39, 43, 25, 175, 89, 67, 140, 35, 93, 75, 143, 49, 175, 10, 241, 60, 123, 109, 189, 155, 127, 128, 148, 134, 246, 86, 21, 165, 89, 238, 65, 167, 187, 76, 231, 44, 228, 207, 167, 213, 170, 227, 183, 5, 194, 7, 16, 91, 229, 121, 82, 232, 109, 125, 151, 183, 231, 88, 231, 167, 178, 62, 230, 248, 106, 170, 159, 158, 9, 70, 222, 109, 127, 85, 196, 43, 252, 167, 53, 75, 139, 93, 209, 110, 83, 236, 197, 146, 106, 8, 21, 73, 168, 20, 48, 52, 16, 197, 82, 106, 5, 14, 13, 2, 176, 233, 53, 2, 178, 59, 136, 239, 76, 216, 237, 139, 146, 226, 129, 117, 89, 75, 45, 231, 117, 170, 182, 104, 116, 178, 212, 220, 162, 187, 121, 253, 10, 46, 179, 195, 71, 126, 76, 236, 175, 65, 182, 187, 113, 156, 9, 151, 57, 94, 33, 42, 230, 1, 222, 189, 6, 170, 81, 202, 174, 29, 162, 115, 86, 123, 178, 237, 89, 134, 5, 0, 10, 0, 20, 1, 230, 233, 13, 127, 1, 226, 129, 141, 73, 200, 247, 214, 12, 243, 131, 164, 215, 193, 144, 242, 218, 30, 206, 167, 19, 205, 75, 192, 166, 82, 228, 137, 71, 225, 11, 6, 64, 102, 206, 20, 132, 101, 194, 73, 4, 242, 0, 103, 115, 83, 40, 230, 66, 66, 88, 173, 5, 176, 93, 74, 222, 119, 197, 79, 138, 218, 185, 234, 231, 239, 166, 178, 9, 68, 74, 167, 186, 66, 248, 65, 226, 13, 129, 9, 208, 14, 57, 213, 124, 236, 46, 194, 241, 7, 237, 169, 132, 149, 23, 35, 37, 212, 249, 149, 165, 92, 142, 13, 68, 101, 181, 228, 153, 71, 114, 192, 164, 229, 107, 116, 56, 78, 124, 184, 198, 121, 122, 84, 38, 228, 219, 125, 201, 113, 81, 73, 46, 194, 82, 99, 132, 42, 42, 147, 255, 0, 49, 31, 173, 76, 95, 114, 118, 246, 24, 76, 139, 227, 113, 193, 65, 39, 75, 142, 167, 88, 238, 146, 50, 127, 74, 182, 45, 173, 50, 101, 22, 215, 187, 92, 226, 253, 75, 233, 90, 26, 108, 149, 233, 74, 18, 55, 207, 33, 92, 196, 165, 41, 97, 44, 182, 119, 158, 216, 46, 120, 72, 139, 119, 138, 109, 141, 40, 167, 196, 90, 186, 121, 17, 181, 116, 97, 210, 53, 83, 89, 199, 230, 96, 151, 81, 211, 197, 227, 35, 9, 151, 78, 26, 157, 188, 200, 65, 106, 251, 197, 172, 26, 190, 61, 51, 91, 30, 207, 243, 51, 79, 83, 163, 159, 205, 31, 200, 99, 142, 16, 255, 0, 234, 200, 79, 249, 84, 175, 222, 173, 251, 14, 187, 216, 207, 226, 104, 189, 25, 23, 113, 246, 22, 36, 55, 39, 135, 164, 202, 109, 97, 91, 165, 210, 112, 61, 213, 100, 52, 58, 140, 124, 105, 20, 219, 42, 184, 117, 182, 90, 44, 188, 94, 211, 49, 116, 221, 29, 91, 142, 231, 32, 161, 28, 189, 43, 61, 221, 30, 233, 60, 193, 35, 77, 26, 216, 198, 56, 155, 36, 135, 26, 218, 71, 87, 255, 0, 217, 84, 254, 230, 212, 251, 127, 82, 231, 174, 164, 48, 227, 123, 71, 82, 255, 0, 251, 42, 63, 114, 234, 125, 191, 168, 191, 110, 168, 56, 227, 155, 56, 234, 255, 0, 251, 40, 253, 203, 170, 246, 254, 164, 61, 109, 65, 135, 29, 89, 251, 191, 254, 202, 63, 114, 234, 125, 191, 169, 31, 108, 168, 227, 220, 125, 107, 67, 106, 44, 165, 229, 185, 143, 42, 74, 113, 147, 77, 30, 137, 168, 114, 74, 93, 132, 150, 174, 188, 112, 86, 96, 95, 96, 207, 190, 252, 231, 196, 229, 231, 90, 100, 229, 152, 205, 39, 41, 7, 215, 210, 187, 208, 210, 61, 61, 62, 29, 43, 151, 221, 152, 37, 102, 249, 101, 151, 225, 242, 163, 97, 72, 9, 13, 74, 0, 108, 62, 142, 179, 253, 134, 214, 27, 145, 223, 237, 78, 199, 255, 0, 42, 87, 253, 186, 143, 176, 216, 27, 144, 63, 181, 43, 23, 86, 165, 127, 219, 163, 236, 54, 134, 228, 72, 90, 56, 254, 195, 116, 145, 224, 33, 245, 178, 225, 56, 72, 121, 58, 66, 169, 39, 165, 178, 11, 44, 148, 203, 72, 35, 189, 102, 36, 243, 187, 161, 9, 181, 0, 179, 245, 80, 43, 6, 57, 58, 78, 75, 195, 65, 166, 225, 48, 80, 190, 154, 193, 247, 81, 21, 241, 4, 223, 194, 70, 54, 230, 171, 98, 146, 146, 126, 162, 135, 199, 53, 123, 92, 148, 39, 247, 127, 131, 27, 90, 70, 153, 39, 238, 150, 207, 167, 74, 105, 243, 18, 186, 120, 151, 36, 155, 78, 106, 190, 172, 164, 140, 6, 197, 80, 215, 194, 105, 79, 239, 9, 20, 111, 25, 75, 236, 133, 126, 181, 94, 11, 87, 97, 105, 101, 58, 130, 134, 192, 140, 212, 193, 114, 68, 251, 13, 102, 184, 179, 46, 34, 53, 115, 113, 28, 189, 244, 201, 45, 172, 86, 219, 156, 87, 184, 172, 69, 183, 47, 140, 31, 91, 4, 169, 198, 156, 78, 173, 188, 161, 41, 73, 4, 231, 190, 113, 79, 47, 135, 76, 147, 37, 125, 231, 80, 110, 33, 248, 186, 226, 173, 105, 132, 210, 148, 18, 6, 92, 35, 175, 97, 91, 250, 54, 150, 59, 93, 210, 252, 9, 234, 186, 135, 185, 84, 136, 155, 125, 150, 125, 198, 50, 228, 69, 105, 10, 105, 7, 74, 148, 92, 72, 193, 248, 154, 221, 170, 234, 154, 93, 45, 170, 171, 158, 27, 89, 236, 223, 246, 71, 30, 48, 148, 150, 80, 243, 254, 19, 189, 13, 67, 217, 219, 216, 100, 253, 42, 54, 29, 249, 242, 172, 139, 246, 135, 167, 53, 243, 191, 244, 203, 191, 244, 31, 192, 159, 167, 230, 59, 188, 240, 220, 175, 100, 249, 193, 49, 26, 138, 180, 12, 73, 142, 29, 5, 41, 56, 250, 201, 223, 145, 237, 89, 122, 127, 90, 169, 219, 246, 103, 55, 60, 252, 178, 195, 229, 122, 62, 59, 175, 94, 195, 78, 169, 99, 36, 69, 178, 205, 58, 232, 210, 215, 5, 144, 226, 27, 62, 108, 173, 41, 35, 224, 122, 87, 91, 89, 212, 244, 186, 41, 70, 23, 75, 13, 251, 55, 253, 138, 227, 7, 46, 195, 181, 112, 165, 225, 33, 57, 142, 216, 212, 50, 156, 190, 141, 255, 0, 58, 202, 191, 104, 52, 15, 56, 147, 227, 255, 0, 23, 250, 19, 224, 207, 211, 243, 58, 158, 17, 189, 18, 156, 69, 65, 213, 245, 126, 157, 27, 251, 183, 168, 127, 180, 61, 61, 103, 51, 124, 119, 248, 95, 232, 79, 129, 63, 79, 204, 40, 225, 107, 185, 32, 6, 26, 201, 233, 237, 8, 253, 233, 255, 0, 127, 104, 146, 206, 231, 254, 151, 250, 17, 224, 203, 211, 243, 58, 120, 74, 244, 53, 127, 10, 223, 148, 225, 95, 78, 141, 191, 58, 85, 251, 67, 211, 222, 62, 55, 207, 254, 47, 244, 15, 6, 126, 159, 152, 63, 225, 59, 200, 115, 195, 49, 155, 11, 206, 52, 248, 232, 206, 127, 26, 23, 237, 6, 129, 199, 114, 147, 199, 174, 215, 250, 7, 131, 62, 216, 252, 206, 158, 18, 189, 2, 1, 138, 216, 212, 112, 62, 157, 27, 158, 220, 234, 23, 237, 15, 79, 121, 196, 223, 250, 95, 232, 79, 131, 63, 79, 204, 235, 124, 39, 119, 43, 72, 117, 132, 33, 191, 16, 37, 74, 15, 163, 41, 239, 215, 158, 41, 103, 251, 67, 160, 81, 123, 100, 220, 177, 148, 182, 191, 211, 176, 42, 165, 146, 106, 71, 14, 71, 50, 221, 131, 243, 99, 113, 216, 70, 205, 206, 76, 176, 167, 51, 142, 106, 73, 60, 137, 232, 43, 141, 87, 90, 185, 87, 29, 71, 140, 229, 39, 203, 134, 199, 183, 30, 137, 227, 186, 245, 45, 240, 150, 113, 143, 204, 131, 95, 10, 221, 208, 78, 89, 100, 131, 245, 84, 31, 72, 200, 252, 107, 185, 30, 191, 161, 127, 196, 243, 254, 87, 250, 20, 248, 50, 56, 120, 82, 240, 148, 133, 152, 237, 132, 147, 128, 124, 116, 115, 252, 104, 255, 0, 244, 26, 6, 240, 164, 243, 254, 87, 250, 7, 131, 63, 79, 204, 66, 109, 134, 231, 111, 140, 37, 200, 105, 40, 107, 56, 10, 75, 169, 59, 250, 96, 214, 141, 55, 86, 210, 106, 109, 240, 107, 109, 203, 211, 13, 127, 177, 14, 185, 69, 101, 163, 69, 224, 174, 61, 140, 213, 141, 12, 94, 95, 38, 67, 43, 40, 74, 207, 53, 163, 3, 7, 243, 35, 225, 69, 250, 70, 231, 152, 118, 4, 204, 229, 231, 81, 34, 42, 152, 73, 5, 65, 56, 218, 184, 73, 60, 228, 233, 73, 167, 28, 33, 57, 1, 247, 163, 165, 144, 140, 145, 177, 60, 169, 150, 19, 200, 173, 73, 172, 36, 35, 10, 222, 251, 40, 41, 80, 72, 30, 170, 21, 50, 154, 22, 53, 77, 46, 80, 225, 232, 225, 164, 235, 43, 70, 174, 128, 17, 70, 236, 134, 220, 12, 226, 47, 23, 53, 172, 12, 39, 78, 196, 154, 153, 46, 8, 131, 106, 100, 187, 78, 226, 38, 144, 70, 84, 147, 141, 234, 156, 114, 94, 159, 1, 229, 188, 173, 40, 80, 194, 135, 34, 5, 76, 87, 112, 147, 124, 12, 238, 110, 186, 175, 12, 198, 25, 117, 24, 41, 192, 235, 77, 4, 179, 134, 37, 142, 88, 248, 123, 142, 184, 9, 189, 11, 146, 242, 137, 83, 143, 19, 168, 30, 105, 193, 206, 126, 57, 63, 133, 70, 173, 124, 40, 183, 165, 191, 190, 105, 247, 104, 71, 138, 1, 77, 225, 210, 175, 180, 144, 64, 244, 174, 231, 72, 105, 233, 82, 51, 117, 53, 141, 75, 247, 57, 105, 151, 11, 216, 102, 91, 238, 37, 214, 218, 144, 164, 44, 56, 218, 53, 16, 83, 211, 29, 169, 117, 218, 125, 67, 190, 173, 70, 159, 13, 195, 41, 166, 241, 195, 247, 49, 193, 199, 14, 44, 158, 186, 202, 128, 205, 197, 248, 178, 20, 227, 81, 229, 91, 218, 67, 110, 20, 106, 41, 198, 251, 138, 225, 232, 169, 212, 219, 166, 133, 213, 165, 41, 194, 201, 54, 147, 199, 224, 139, 101, 37, 158, 125, 6, 215, 73, 204, 220, 45, 87, 137, 12, 156, 37, 114, 153, 8, 213, 204, 128, 156, 103, 21, 171, 71, 165, 179, 77, 169, 211, 213, 103, 117, 25, 103, 30, 77, 177, 101, 37, 40, 178, 47, 135, 174, 113, 109, 158, 216, 37, 68, 241, 195, 236, 150, 199, 159, 27, 118, 248, 215, 75, 170, 232, 181, 26, 191, 15, 193, 179, 102, 217, 103, 182, 127, 230, 4, 174, 106, 41, 166, 139, 28, 85, 70, 122, 231, 100, 91, 81, 219, 67, 95, 55, 186, 81, 31, 58, 136, 255, 0, 165, 36, 245, 175, 61, 124, 109, 175, 77, 170, 82, 147, 111, 124, 86, 236, 99, 241, 126, 222, 184, 46, 77, 57, 46, 60, 132, 219, 148, 220, 171, 253, 133, 197, 151, 216, 117, 15, 58, 21, 30, 78, 7, 132, 52, 43, 124, 224, 115, 171, 44, 162, 117, 104, 117, 81, 138, 140, 147, 80, 106, 81, 243, 123, 151, 29, 223, 98, 22, 28, 147, 244, 35, 109, 183, 88, 12, 166, 28, 116, 218, 162, 153, 98, 72, 11, 121, 193, 159, 46, 174, 121, 239, 93, 13, 86, 131, 83, 99, 182, 215, 116, 149, 110, 28, 37, 228, 241, 244, 236, 44, 102, 150, 22, 3, 221, 46, 113, 217, 118, 239, 3, 217, 146, 93, 145, 52, 16, 250, 79, 64, 71, 58, 77, 30, 134, 217, 199, 79, 168, 115, 120, 140, 26, 219, 239, 143, 47, 247, 7, 52, 178, 177, 230, 72, 34, 100, 38, 248, 194, 230, 196, 150, 25, 113, 197, 200, 241, 35, 60, 175, 178, 224, 72, 199, 152, 116, 53, 207, 122, 109, 68, 186, 61, 22, 87, 38, 146, 142, 36, 189, 98, 223, 167, 170, 27, 49, 241, 30, 70, 150, 249, 112, 228, 74, 137, 22, 237, 226, 51, 46, 52, 229, 56, 159, 9, 32, 165, 69, 71, 150, 122, 96, 245, 173, 122, 189, 54, 162, 186, 173, 187, 74, 148, 161, 58, 210, 231, 134, 176, 189, 63, 216, 88, 181, 44, 39, 198, 24, 141, 193, 41, 84, 43, 142, 112, 65, 191, 54, 64, 255, 0, 74, 255, 0, 165, 91, 167, 82, 251, 77, 28, 127, 216, 151, 247, 143, 252, 192, 75, 229, 127, 82, 73, 245, 198, 110, 231, 121, 121, 184, 241, 228, 74, 14, 161, 74, 75, 192, 29, 76, 233, 26, 180, 250, 214, 26, 149, 210, 211, 233, 171, 148, 165, 24, 56, 181, 149, 229, 44, 189, 187, 189, 134, 120, 221, 39, 129, 55, 238, 86, 229, 181, 107, 157, 62, 27, 13, 180, 220, 130, 88, 105, 176, 10, 131, 24, 59, 145, 232, 112, 105, 161, 162, 213, 69, 234, 52, 250, 123, 36, 219, 143, 196, 223, 243, 231, 203, 234, 184, 201, 14, 113, 198, 90, 31, 55, 62, 51, 48, 98, 41, 233, 209, 164, 176, 236, 151, 85, 33, 215, 24, 198, 64, 72, 242, 165, 61, 58, 10, 199, 45, 45, 211, 190, 197, 26, 220, 100, 163, 5, 20, 165, 234, 251, 183, 248, 246, 31, 116, 125, 74, 205, 204, 182, 120, 106, 217, 224, 164, 37, 30, 211, 35, 74, 122, 128, 85, 145, 94, 143, 69, 25, 174, 161, 126, 238, 251, 96, 155, 245, 194, 242, 41, 147, 78, 9, 145, 209, 45, 242, 229, 182, 87, 21, 151, 28, 64, 86, 146, 80, 51, 131, 219, 243, 21, 216, 114, 75, 185, 88, 118, 195, 77, 43, 83, 49, 94, 79, 227, 92, 87, 210, 230, 255, 0, 137, 27, 22, 162, 184, 246, 76, 92, 201, 81, 229, 29, 255, 0, 126, 13, 47, 238, 169, 255, 0, 50, 31, 237, 80, 247, 8, 243, 206, 188, 141, 37, 167, 128, 244, 69, 50, 233, 82, 79, 230, 66, 203, 83, 22, 188, 198, 102, 2, 86, 176, 181, 181, 37, 68, 14, 90, 77, 59, 233, 214, 127, 50, 43, 241, 107, 247, 28, 134, 219, 198, 21, 13, 229, 12, 125, 195, 75, 251, 178, 127, 204, 137, 241, 171, 94, 65, 193, 66, 83, 165, 48, 158, 0, 114, 242, 154, 143, 221, 118, 127, 58, 27, 237, 21, 122, 5, 58, 190, 196, 119, 199, 250, 77, 74, 233, 147, 254, 100, 71, 218, 35, 228, 133, 88, 144, 243, 111, 182, 234, 152, 120, 132, 28, 224, 55, 206, 161, 244, 166, 214, 55, 33, 227, 170, 140, 100, 158, 9, 24, 247, 86, 99, 184, 227, 140, 218, 158, 66, 157, 57, 89, 9, 231, 85, 75, 163, 217, 37, 135, 52, 108, 135, 83, 162, 18, 115, 140, 57, 99, 75, 196, 207, 156, 66, 10, 97, 190, 219, 136, 200, 213, 164, 238, 43, 126, 131, 71, 61, 46, 98, 229, 152, 179, 38, 183, 87, 94, 165, 38, 163, 134, 134, 86, 249, 8, 130, 183, 4, 200, 129, 246, 156, 78, 22, 133, 229, 42, 79, 98, 147, 208, 213, 250, 189, 60, 239, 138, 240, 231, 178, 75, 179, 238, 190, 141, 121, 163, 12, 95, 60, 161, 213, 254, 238, 155, 154, 99, 182, 210, 28, 74, 25, 207, 157, 213, 234, 90, 179, 211, 61, 171, 47, 76, 233, 242, 210, 57, 202, 77, 102, 94, 73, 97, 113, 237, 234, 76, 231, 184, 137, 4, 233, 211, 146, 6, 114, 64, 239, 93, 76, 44, 136, 114, 128, 14, 133, 41, 10, 74, 131, 139, 212, 147, 148, 168, 29, 211, 238, 168, 113, 139, 206, 87, 31, 220, 5, 101, 77, 151, 49, 73, 92, 167, 214, 226, 210, 48, 146, 163, 184, 248, 213, 52, 105, 104, 162, 46, 53, 71, 9, 242, 209, 46, 82, 147, 203, 98, 3, 32, 213, 228, 0, 146, 73, 57, 36, 147, 157, 232, 236, 176, 128, 233, 82, 179, 156, 146, 71, 218, 39, 122, 48, 146, 194, 236, 7, 50, 117, 5, 19, 146, 57, 26, 48, 177, 140, 112, 0, 202, 183, 26, 142, 9, 201, 223, 153, 239, 81, 133, 232, 0, 223, 57, 212, 117, 31, 181, 157, 234, 112, 177, 128, 228, 28, 249, 228, 252, 106, 123, 118, 15, 96, 121, 138, 112, 78, 123, 84, 121, 182, 188, 195, 145, 245, 170, 211, 62, 239, 37, 49, 237, 241, 221, 116, 231, 114, 1, 210, 156, 247, 61, 41, 39, 56, 65, 101, 146, 147, 236, 141, 215, 132, 248, 121, 139, 5, 149, 168, 67, 11, 115, 37, 110, 175, 31, 89, 103, 159, 232, 63, 10, 227, 93, 124, 172, 155, 101, 137, 31, 255, 217 },
                            ContentType = "image/png",
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Pune Municipal Corporation official logo for certificates",
                            IsActive = true,
                            SettingKey = "PMC_LOGO"
                        });
                });

            modelBuilder.Entity("PMCRMS.API.Models.Transaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal?>("AmountPaid")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ApplicationId")
                        .HasColumnType("integer");

                    b.Property<string>("BdOrderId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("CardType")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("ClientIpAddress")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("EaseBuzzStatus")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("ErrorMessage")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("LastName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Mode")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("PaymentGatewayResponse")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("RData")
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("TransactionId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserAgent")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("TransactionId")
                        .IsUnique();

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("PMCRMS.API.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("EmployeeId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastLoginAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("LockedUntil")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("LoginAttempts")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("PasswordHash")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("EmployeeId")
                        .IsUnique()
                        .HasFilter("\"EmployeeId\" IS NOT NULL");

                    b.HasIndex("PhoneNumber")
                        .IsUnique()
                        .HasFilter("\"PhoneNumber\" IS NOT NULL");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("PMCRMS.API.Models.Application", b =>
                {
                    b.HasOne("PMCRMS.API.Models.User", "Applicant")
                        .WithMany("Applications")
                        .HasForeignKey("ApplicantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Applicant");
                });

            modelBuilder.Entity("PMCRMS.API.Models.ApplicationComment", b =>
                {
                    b.HasOne("PMCRMS.API.Models.Application", "Application")
                        .WithMany("Comments")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PMCRMS.API.Models.Officer", "CommentedByOfficer")
                        .WithMany()
                        .HasForeignKey("CommentedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PMCRMS.API.Models.ApplicationComment", "ParentComment")
                        .WithMany("Replies")
                        .HasForeignKey("ParentCommentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Application");

                    b.Navigation("CommentedByOfficer");

                    b.Navigation("ParentComment");
                });

            modelBuilder.Entity("PMCRMS.API.Models.ApplicationDocument", b =>
                {
                    b.HasOne("PMCRMS.API.Models.Application", "Application")
                        .WithMany("Documents")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PMCRMS.API.Models.Officer", "VerifiedByOfficer")
                        .WithMany()
                        .HasForeignKey("VerifiedBy")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Application");

                    b.Navigation("VerifiedByOfficer");
                });

            modelBuilder.Entity("PMCRMS.API.Models.ApplicationStatus", b =>
                {
                    b.HasOne("PMCRMS.API.Models.Application", "Application")
                        .WithMany("StatusHistory")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PMCRMS.API.Models.Officer", "UpdatedByOfficer")
                        .WithMany("StatusUpdates")
                        .HasForeignKey("UpdatedByOfficerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PMCRMS.API.Models.User", "UpdatedByUser")
                        .WithMany("StatusUpdates")
                        .HasForeignKey("UpdatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Application");

                    b.Navigation("UpdatedByOfficer");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("PMCRMS.API.Models.Appointment", b =>
                {
                    b.HasOne("PMCRMS.API.Models.PositionApplication", "Application")
                        .WithMany("Appointments")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PMCRMS.API.Models.Appointment", "RescheduledToAppointment")
                        .WithOne("RescheduledFromAppointment")
                        .HasForeignKey("PMCRMS.API.Models.Appointment", "RescheduledToAppointmentId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("PMCRMS.API.Models.Officer", "ScheduledByOfficer")
                        .WithMany()
                        .HasForeignKey("ScheduledByOfficerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Application");

                    b.Navigation("RescheduledToAppointment");

                    b.Navigation("ScheduledByOfficer");
                });

            modelBuilder.Entity("PMCRMS.API.Models.AssignmentHistory", b =>
                {
                    b.HasOne("PMCRMS.API.Models.PositionApplication", "Application")
                        .WithMany("AssignmentHistories")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PMCRMS.API.Models.Officer", "AssignedToOfficer")
                        .WithMany()
                        .HasForeignKey("AssignedToOfficerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PMCRMS.API.Models.AutoAssignmentRule", "AutoAssignmentRule")
                        .WithMany("AssignmentHistories")
                        .HasForeignKey("AutoAssignmentRuleId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("PMCRMS.API.Models.Officer", "PreviousOfficer")
                        .WithMany()
                        .HasForeignKey("PreviousOfficerId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Application");

                    b.Navigation("AssignedToOfficer");

                    b.Navigation("AutoAssignmentRule");

                    b.Navigation("PreviousOfficer");
                });

            modelBuilder.Entity("PMCRMS.API.Models.Challan", b =>
                {
                    b.HasOne("PMCRMS.API.Models.PositionApplication", "PositionApplication")
                        .WithMany()
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PositionApplication");
                });

            modelBuilder.Entity("PMCRMS.API.Models.DigitalSignature", b =>
                {
                    b.HasOne("PMCRMS.API.Models.PositionApplication", "Application")
                        .WithMany("DigitalSignatures")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PMCRMS.API.Models.Officer", "SignedByOfficer")
                        .WithMany()
                        .HasForeignKey("SignedByOfficerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("SignedByOfficer");
                });

            modelBuilder.Entity("PMCRMS.API.Models.DocumentVerification", b =>
                {
                    b.HasOne("PMCRMS.API.Models.PositionApplication", "Application")
                        .WithMany("DocumentVerifications")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PMCRMS.API.Models.SEDocument", "Document")
                        .WithMany()
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PMCRMS.API.Models.Officer", "VerifiedByOfficer")
                        .WithMany()
                        .HasForeignKey("VerifiedByOfficerId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Application");

                    b.Navigation("Document");

                    b.Navigation("VerifiedByOfficer");
                });

            modelBuilder.Entity("PMCRMS.API.Models.DownloadAuditLog", b =>
                {
                    b.HasOne("PMCRMS.API.Models.Application", "Application")
                        .WithMany()
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");
                });

            modelBuilder.Entity("PMCRMS.API.Models.DownloadToken", b =>
                {
                    b.HasOne("PMCRMS.API.Models.Application", "Application")
                        .WithMany()
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");
                });

            modelBuilder.Entity("PMCRMS.API.Models.FormFeeHistory", b =>
                {
                    b.HasOne("PMCRMS.API.Models.SystemAdmin", "ChangedByAdmin")
                        .WithMany()
                        .HasForeignKey("ChangedByAdminId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PMCRMS.API.Models.User", "ChangedByUser")
                        .WithMany()
                        .HasForeignKey("ChangedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PMCRMS.API.Models.FormConfiguration", "FormConfiguration")
                        .WithMany("FeeHistory")
                        .HasForeignKey("FormConfigurationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChangedByAdmin");

                    b.Navigation("ChangedByUser");

                    b.Navigation("FormConfiguration");
                });

            modelBuilder.Entity("PMCRMS.API.Models.Notification", b =>
                {
                    b.HasOne("PMCRMS.API.Models.Application", "Application")
                        .WithMany()
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("PMCRMS.API.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PMCRMS.API.Models.OfficerInvitation", b =>
                {
                    b.HasOne("PMCRMS.API.Models.SystemAdmin", "InvitedByAdmin")
                        .WithMany()
                        .HasForeignKey("InvitedByAdminId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PMCRMS.API.Models.Officer", "Officer")
                        .WithOne("Invitation")
                        .HasForeignKey("PMCRMS.API.Models.OfficerInvitation", "OfficerId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("InvitedByAdmin");

                    b.Navigation("Officer");
                });

            modelBuilder.Entity("PMCRMS.API.Models.Payment", b =>
                {
                    b.HasOne("PMCRMS.API.Models.Application", "Application")
                        .WithMany("Payments")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PMCRMS.API.Models.Officer", "ProcessedByOfficer")
                        .WithMany()
                        .HasForeignKey("ProcessedBy")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Application");

                    b.Navigation("ProcessedByOfficer");
                });

            modelBuilder.Entity("PMCRMS.API.Models.PositionApplication", b =>
                {
                    b.HasOne("PMCRMS.API.Models.Officer", "AssignedAEArchitect")
                        .WithMany()
                        .HasForeignKey("AssignedAEArchitectId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("PMCRMS.API.Models.Officer", "AssignedAELicence")
                        .WithMany()
                        .HasForeignKey("AssignedAELicenceId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("PMCRMS.API.Models.Officer", "AssignedAEStructural")
                        .WithMany()
                        .HasForeignKey("AssignedAEStructuralId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("PMCRMS.API.Models.Officer", "AssignedAESupervisor1")
                        .WithMany()
                        .HasForeignKey("AssignedAESupervisor1Id")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("PMCRMS.API.Models.Officer", "AssignedAESupervisor2")
                        .WithMany()
                        .HasForeignKey("AssignedAESupervisor2Id")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("PMCRMS.API.Models.Officer", "AssignedCEStage2")
                        .WithMany()
                        .HasForeignKey("AssignedCEStage2Id")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("PMCRMS.API.Models.Officer", "AssignedCityEngineer")
                        .WithMany()
                        .HasForeignKey("AssignedCityEngineerId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("PMCRMS.API.Models.Officer", "AssignedClerk")
                        .WithMany()
                        .HasForeignKey("AssignedClerkId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("PMCRMS.API.Models.Officer", "AssignedEEStage2")
                        .WithMany()
                        .HasForeignKey("AssignedEEStage2Id")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("PMCRMS.API.Models.Officer", "AssignedExecutiveEngineer")
                        .WithMany()
                        .HasForeignKey("AssignedExecutiveEngineerId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("PMCRMS.API.Models.Officer", "AssignedJuniorEngineer")
                        .WithMany()
                        .HasForeignKey("AssignedJuniorEngineerId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("PMCRMS.API.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AssignedAEArchitect");

                    b.Navigation("AssignedAELicence");

                    b.Navigation("AssignedAEStructural");

                    b.Navigation("AssignedAESupervisor1");

                    b.Navigation("AssignedAESupervisor2");

                    b.Navigation("AssignedCEStage2");

                    b.Navigation("AssignedCityEngineer");

                    b.Navigation("AssignedClerk");

                    b.Navigation("AssignedEEStage2");

                    b.Navigation("AssignedExecutiveEngineer");

                    b.Navigation("AssignedJuniorEngineer");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PMCRMS.API.Models.SEAddress", b =>
                {
                    b.HasOne("PMCRMS.API.Models.PositionApplication", "Application")
                        .WithMany("Addresses")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");
                });

            modelBuilder.Entity("PMCRMS.API.Models.SEDocument", b =>
                {
                    b.HasOne("PMCRMS.API.Models.PositionApplication", "Application")
                        .WithMany("Documents")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PMCRMS.API.Models.Officer", "VerifiedByOfficer")
                        .WithMany()
                        .HasForeignKey("VerifiedBy")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Application");

                    b.Navigation("VerifiedByOfficer");
                });

            modelBuilder.Entity("PMCRMS.API.Models.SEExperience", b =>
                {
                    b.HasOne("PMCRMS.API.Models.PositionApplication", "Application")
                        .WithMany("Experiences")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");
                });

            modelBuilder.Entity("PMCRMS.API.Models.SEQualification", b =>
                {
                    b.HasOne("PMCRMS.API.Models.PositionApplication", "Application")
                        .WithMany("Qualifications")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");
                });

            modelBuilder.Entity("PMCRMS.API.Models.Transaction", b =>
                {
                    b.HasOne("PMCRMS.API.Models.PositionApplication", "Application")
                        .WithMany()
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");
                });

            modelBuilder.Entity("PMCRMS.API.Models.Application", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Documents");

                    b.Navigation("Payments");

                    b.Navigation("StatusHistory");
                });

            modelBuilder.Entity("PMCRMS.API.Models.ApplicationComment", b =>
                {
                    b.Navigation("Replies");
                });

            modelBuilder.Entity("PMCRMS.API.Models.Appointment", b =>
                {
                    b.Navigation("RescheduledFromAppointment");
                });

            modelBuilder.Entity("PMCRMS.API.Models.AutoAssignmentRule", b =>
                {
                    b.Navigation("AssignmentHistories");
                });

            modelBuilder.Entity("PMCRMS.API.Models.FormConfiguration", b =>
                {
                    b.Navigation("FeeHistory");
                });

            modelBuilder.Entity("PMCRMS.API.Models.Officer", b =>
                {
                    b.Navigation("Invitation");

                    b.Navigation("StatusUpdates");
                });

            modelBuilder.Entity("PMCRMS.API.Models.PositionApplication", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("Appointments");

                    b.Navigation("AssignmentHistories");

                    b.Navigation("DigitalSignatures");

                    b.Navigation("DocumentVerifications");

                    b.Navigation("Documents");

                    b.Navigation("Experiences");

                    b.Navigation("Qualifications");
                });

            modelBuilder.Entity("PMCRMS.API.Models.User", b =>
                {
                    b.Navigation("Applications");

                    b.Navigation("StatusUpdates");
                });
#pragma warning restore 612, 618
        }
    }
}
